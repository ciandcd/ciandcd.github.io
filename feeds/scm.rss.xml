<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>news.ciandcd.com</title><link>http://ciandcd.github.io/</link><description>软件持续集成和发布</description><lastBuildDate>Sat, 23 Jul 2016 05:52:07 +0800</lastBuildDate><item><title>A closer look at Europe · GitHub</title><link>http://ciandcd.github.io/a-closer-look-at-europe-github.html</link><description>From:&lt;a href="https://github.com/blog/2023-a-closer-look-at-europe"&gt;https://github.com/blog/2023-a-closer-look-at-europe&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Last week we opened our first &lt;a href="https://github.com/blog/2017-announcing-github-japan"&gt;international office in Japan&lt;/a&gt;. This week we thought we'd take a closer look at Europe, which happens to be the largest demographic of GitHub users around the world, representing 36% of site traffic.&lt;/p&gt;

&lt;p&gt;Around 32 million people visit GitHub each month, and most of this traffic comes from outside of the United States (74% in fact!).
The most active countries in Europe are Germany, the United Kingdom, and France, but if we look at users per capita we see a different story -- Sweden, Finland, and the Netherlands lead the way. London, Paris and Stockholm top the list of European cities most active on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/25/8152704/83b76acc-12d5-11e5-851c-3fa139ee3137.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/25/8152704/83b76acc-12d5-11e5-851c-3fa139ee3137.png" alt="Growth of most active European countries on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goals of building better software are universal, and several European organizations are setting the example.
Companies like &lt;a href="https://enterprise.github.com/stories/sap"&gt;SAP&lt;/a&gt; and XS4ALL are driving innovation with software, while &lt;a href="https://alphagov.github.io/"&gt;The UK Government Digital Services&lt;/a&gt; and &lt;a href="https://government.github.com/community/"&gt;dozens of other European government agencies and services&lt;/a&gt; are developing new ways to serve citizens.&lt;/p&gt;

&lt;p&gt;Today, around 10% of GitHub employees are based in Europe, with a dozen new faces in the last year alone -- many of whom are focused solely on helping our European customers build great software.
A few of us are here in the UK for &lt;a href="http://londontechnologyweek.co.uk/"&gt;London Tech Week&lt;/a&gt; and &lt;a href="https://enterconf.com/"&gt;EnterConf&lt;/a&gt; in Belfast. There will be plenty more meetups ahead if we don't see you there.&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:a-closer-look-at-europe-github.html</guid></item><item><title>A new GitLab Logo</title><link>http://ciandcd.github.io/a-new-gitlab-logo.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/18/a-new-gitlab-logo/"&gt;https://www.gitlab.com/2015/05/18/a-new-gitlab-logo/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;A new GitLab Logo&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We hear you:&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Gitlab seems like a cool service, but my god that logo is scary&lt;/p&gt;&amp;#8212; Matt Bachmann (@MattBachmann) &lt;a href="https://twitter.com/MattBachmann/status/575671070268768256"&gt;March 11, 2015&lt;/a&gt;&lt;/blockquote&gt;


 


&lt;p&gt;We have a scary, angry looking raccoon dog logo.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;this creepy human/racoon hybrid that is the &lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt; logo is starting to really freak me out &lt;a href="http://t.co/HJarlbRNOo"&gt;pic.twitter.com/HJarlbRNOo&lt;/a&gt;&lt;/p&gt;&amp;#8212; hatewell (@hatwell) &lt;a href="https://twitter.com/hatwell/status/556028082709348352"&gt;January 16, 2015&lt;/a&gt;&lt;/blockquote&gt;


 


&lt;p&gt;We figured we could use a better representation of GitLab.&lt;/p&gt;

 


&lt;p&gt;&lt;strong&gt;Update May 20th:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After careful consideration we have decided that this is our new logo:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/A.jpg" alt="new GitLab Logo option A"&gt;&lt;/p&gt;

&lt;p&gt;We like the way it looks in GitLab:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/l2.png" alt="The new logo in GitLab"&gt;
&lt;img src="/images/new_logo/l3.png" alt="The new logo in GitLab, different color scheme"&gt;&lt;/p&gt;

&lt;p&gt;And compared to the old logo:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/l1.png" alt="New vs. old GitLab logo"&gt;&lt;/p&gt;



&lt;p&gt;The options we didn&amp;#8217;t pick:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/new_logo/B.jpg" alt="new GitLab Logo option B"&gt;
&lt;img src="/images/new_logo/C.jpg" alt="new GitLab Logo option C"&gt;
&lt;img src="/images/new_logo/D.jpg" alt="new GitLab Logo option D"&gt;&lt;/p&gt;

&lt;p&gt;If you have a better suggestion than one of the ones above, a certain preference
or opinion, we&amp;#8217;d love to hear it.&lt;/p&gt;

&lt;p&gt;The final choice of our new logo rests with &lt;a href="https://twitter.com/dzaporozhets"&gt;Dmitriy&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:a-new-gitlab-logo.html</guid></item><item><title>An updated header, just for you · GitHub</title><link>http://ciandcd.github.io/an-updated-header-just-for-you-github.html</link><description>From:&lt;a href="https://github.com/blog/2022-an-updated-header-just-for-you"&gt;https://github.com/blog/2022-an-updated-header-just-for-you&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Navigating what's most important to you on GitHub.com just got a little easier with our updated site header.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/98681/8116294/212a0ff0-1036-11e5-9450-b08d1cb7999c.jpg" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/98681/8116294/212a0ff0-1036-11e5-9450-b08d1cb7999c.jpg" alt="New GitHub header"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new header gives you faster access to &lt;a href="https://github.com/blog/1901-managing-issues-and-pull-requests-across-repositories"&gt;your pull requests and issues dashboards&lt;/a&gt; from anywhere on the site. If you're unfamiliar with them, these dashboards list all of your open pull requests and issues&amp;#8212;as well as those you've been mentioned in or are assigned to&amp;#8212;in one place. Use them to stay up to date on what needs to be done across your projects.&lt;/p&gt;

&lt;p&gt;Lastly, clicking your avatar now opens a new dropdown menu with links to your profile, account settings, and more. As a small bonus, we've also included a new Your stars link for easy access to your starred repositories.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:an-updated-header-just-for-you-github.html</guid></item><item><title>Announcing Atom 1.0 · GitHub</title><link>http://ciandcd.github.io/announcing-atom-10-github.html</link><description>From:&lt;a href="https://github.com/blog/2031-announcing-atom-1-0"&gt;https://github.com/blog/2031-announcing-atom-1-0&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/378023/8232151/5be2347e-1608-11e5-8e5c-157da28c9ce7.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/378023/8232151/5be2347e-1608-11e5-8e5c-157da28c9ce7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub is pleased to announce that version 1.0 of the Atom text editor is now available from &lt;a href="https://atom.io"&gt;atom.io&lt;/a&gt;. Read the full behind the scenes story over on the &lt;a href="http://blog.atom.io/2015/06/25/atom-1-0.html"&gt;Atom blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The entire Atom team is attending &lt;a href="http://codeconf.com"&gt;CodeConf&lt;/a&gt; this week and will be presenting a session all about Atom 1.0 featuring &lt;a href="https://github.com/defunkt"&gt;Chris Wanstrath&lt;/a&gt;, &lt;a href="https://github.com/benogle"&gt;Ben Ogle&lt;/a&gt;, and &lt;a href="https://github.com/thedaniel"&gt;Daniel Hengeveld&lt;/a&gt;. Watch along tomorrow, June 26th, at 11AM EDT: &lt;a href="https://live-stream.github.com"&gt;https://live-stream.github.com&lt;/a&gt;&lt;/p&gt;


  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:announcing-atom-10-github.html</guid></item><item><title>Announcing GitHub Japan · GitHub</title><link>http://ciandcd.github.io/announcing-github-japan-github.html</link><description>From:&lt;a href="https://github.com/blog/2017-announcing-github-japan"&gt;https://github.com/blog/2017-announcing-github-japan&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;GitHub &amp;lt;3s Japan, and today we&amp;#8217;re excited to announce the formation of GitHub Japan G.K., a subsidiary of GitHub, Inc. Our new office in Tokyo is our first official office outside of the United States. &lt;/p&gt;

&lt;h3&gt;The Japanese developer community&lt;/h3&gt;

&lt;p&gt;GitHub couldn&amp;#8217;t exist without the Japanese open source community &amp;#8212; after all, our site is built on &lt;a href="https://github.com/rails/rails"&gt;Rails&lt;/a&gt;, which is built on &lt;a href="https://github.com/ruby/ruby"&gt;Ruby&lt;/a&gt;, an open source project &lt;a href="https://www.ruby-lang.org/en/about/"&gt;started in Japan&lt;/a&gt;. Japan has historically been one of the most active countries on GitHub, ranking in the top 10 countries visiting github.com since GitHub was founded in 2008. The thriving software community in Japan keeps growing; in 2014, activity on github.com from Japan increased more than 60 percent from the previous year. &lt;/p&gt;

&lt;h3&gt;GitHub Enterprise in Japan&lt;/h3&gt;

&lt;p&gt;In addition to an active local open source community, Japanese businesses including &lt;a href="http://www.hitachi-systems.com/eng/"&gt;Hitachi Systems&lt;/a&gt;, &lt;a href="https://enterprise.github.com/stories/cyberagent"&gt;CyberAgent&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=j1-G14EJRQ8"&gt;GREE&lt;/a&gt; are collaborating and building the best software with GitHub Enterprise. To that end, we&amp;#8217;re also announcing that we'll be partnering locally to provide Japanese language technical support for GitHub Enterprise users, as well as the ability to pay in Japanese Yen in Japan. &lt;/p&gt;

&lt;h3&gt;Stay up to date&lt;/h3&gt;

&lt;p&gt;Keep tabs on everything happening in our Tokyo office by following &lt;a href="https://twitter.com/githubjapan"&gt;@GitHubJapan&lt;/a&gt; on Twitter and checking out &lt;a href="http://github.co.jp/"&gt;github.co.jp&lt;/a&gt;. We&amp;#8217;d also love to see you at our &lt;a href="http://ptix.co/1cIsp83"&gt;meetup in Osaka on June 6&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Yoroshiku-Onegaiitashimasu!&lt;/p&gt;

&lt;h1&gt;&amp;#21021;&amp;#12417;&amp;#12414;&amp;#12375;&amp;#12390;GitHub Japan&amp;#12391;&amp;#12377;&amp;#65281;&lt;/h1&gt;

&lt;p&gt;GitHub &amp;lt;3s Japan, &amp;#26412;&amp;#26085;&amp;#12289;&amp;#31169;&amp;#36948;&amp;#12399;GitHub, Inc.&amp;#12398;&amp;#23376;&amp;#20250;&amp;#31038;&amp;#12391;&amp;#12354;&amp;#12427;&amp;#12289;GitHub Japan&amp;#21512;&amp;#21516;&amp;#20250;&amp;#31038;&amp;#12398;&amp;#35373;&amp;#31435;&amp;#12398;&amp;#30330;&amp;#34920;&amp;#12364;&amp;#12391;&amp;#12365;&amp;#12427;&amp;#20107;&amp;#12434;&amp;#12392;&amp;#12390;&amp;#12418;&amp;#20809;&amp;#26628;&amp;#12395;&amp;#24605;&amp;#12387;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12414;&amp;#12377; &amp;#12290;&amp;#26481;&amp;#20140;&amp;#12395;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12375;&amp;#12383;&amp;#26032;&amp;#12375;&amp;#12356;&amp;#12458;&amp;#12501;&amp;#12451;&amp;#12473;&amp;#12399;&amp;#12289;&amp;#31859;&amp;#22269;&amp;#22806;&amp;#12391;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12377;&amp;#12427;&amp;#21021;&amp;#12398;&amp;#12458;&amp;#12501;&amp;#12451;&amp;#12473;&amp;#12395;&amp;#12394;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#12290;&lt;/p&gt;

&lt;h3&gt;&amp;#12316;&amp;#26085;&amp;#26412;&amp;#12398;&amp;#12487;&amp;#12505;&amp;#12525;&amp;#12483;&amp;#12497;&amp;#12540;&amp;#12539;&amp;#12467;&amp;#12511;&amp;#12517;&amp;#12491;&amp;#12486;&amp;#12451;&amp;#12395;&amp;#12416;&amp;#12369;&amp;#12390;&amp;#12316;&lt;/h3&gt;

&lt;p&gt;GitHub&amp;#12399;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12391;&amp;#29983;&amp;#12414;&amp;#12428;&amp;#12383;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12477;&amp;#12540;&amp;#12473;&amp;#12539;&amp;#12503;&amp;#12525;&amp;#12472;&amp;#12455;&amp;#12463;&amp;#12488;&amp;#12398;Ruby&amp;#12391;&amp;#20316;&amp;#12425;&amp;#12428;&amp;#12383;Rails&amp;#12392;&amp;#12356;&amp;#12358;&amp;#12501;&amp;#12524;&amp;#12540;&amp;#12512;&amp;#12527;&amp;#12540;&amp;#12463;&amp;#12395;&amp;#12424;&amp;#12387;&amp;#12390;&amp;#38283;&amp;#30330;&amp;#12373;&amp;#12428;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12398;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12477;&amp;#12540;&amp;#12473;&amp;#12539;&amp;#12467;&amp;#12511;&amp;#12517;&amp;#12491;&amp;#12486;&amp;#12451;&amp;#12540;&amp;#12394;&amp;#12375;&amp;#12391;&amp;#12399;GitHub&amp;#12399;&amp;#23384;&amp;#22312;&amp;#12375;&amp;#12360;&amp;#12394;&amp;#12356;&amp;#12392;&amp;#35328;&amp;#12387;&amp;#12390;&amp;#12399;&amp;#36942;&amp;#35328;&amp;#12391;&amp;#12399;&amp;#12394;&amp;#12356;&amp;#31243;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12392;GitHub&amp;#12399;&amp;#28145;&amp;#12356;&amp;#12388;&amp;#12394;&amp;#12364;&amp;#12426;&amp;#12364;&amp;#12354;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#12290;
&amp;#12414;&amp;#12383;&amp;#12289;2008&amp;#24180;&amp;#12398;GitHub&amp;#35373;&amp;#31435;&amp;#24403;&amp;#21021;&amp;#12363;&amp;#12425;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12363;&amp;#12425;github.com&amp;#12408;&amp;#12398;&amp;#12450;&amp;#12463;&amp;#12475;&amp;#12473;&amp;#25968;&amp;#12399;&amp;#19978;&amp;#20301;10&amp;#12534;&amp;#22269;&amp;#12395;&amp;#20837;&amp;#12426;&amp;#32154;&amp;#12369;&amp;#12390;&amp;#12365;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12390;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#12398;&amp;#12518;&amp;#12540;&amp;#12470;&amp;#12540;&amp;#12399;&amp;#29694;&amp;#22312;&amp;#12418;&amp;#22679;&amp;#21152;&amp;#12375;&amp;#32154;&amp;#12369;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12289;2014&amp;#24180;&amp;#12398;&amp;#26085;&amp;#26412;&amp;#12518;&amp;#12540;&amp;#12470;&amp;#12540;&amp;#12398;GitHub&amp;#19978;&amp;#12391;&amp;#12398;&amp;#12450;&amp;#12463;&amp;#12486;&amp;#12451;&amp;#12499;&amp;#12486;&amp;#12451;&amp;#12399;&amp;#12289;&amp;#21069;&amp;#24180;&amp;#27604;60&amp;#65285;&amp;#12418;&amp;#22679;&amp;#21152;&amp;#12375;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&lt;/p&gt;

&lt;h3&gt;&amp;#65374;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12398;&amp;#26085;&amp;#26412;&amp;#23637;&amp;#38283;&amp;#65374;&lt;/h3&gt;

&lt;p&gt;GitHub&amp;#12399;&amp;#24195;&amp;#12367;&amp;#38283;&amp;#12363;&amp;#12428;&amp;#12383;&amp;#38283;&amp;#30330;&amp;#12434;&amp;#25903;&amp;#25588;&amp;#12377;&amp;#12427;&amp;#12458;&amp;#12540;&amp;#12503;&amp;#12531;&amp;#12477;&amp;#12540;&amp;#12473;&amp;#12539;&amp;#12503;&amp;#12521;&amp;#12483;&amp;#12488;&amp;#12501;&amp;#12457;&amp;#12540;&amp;#12512;&amp;#20197;&amp;#22806;&amp;#12395;&amp;#12418;&amp;#12289;&amp;#20840;&amp;#19990;&amp;#30028;&amp;#12391;&amp;#20225;&amp;#26989;&amp;#21521;&amp;#12369;&amp;#12395;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12434;&amp;#25552;&amp;#20379;&amp;#12375;&amp;#12390;&amp;#21442;&amp;#12426;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12371;&amp;#12428;&amp;#12414;&amp;#12391;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12399;&amp;#12289;&amp;#33521;&amp;#35486;&amp;#12391;&amp;#12398;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12398;&amp;#12415;&amp;#12384;&amp;#12387;&amp;#12383;&amp;#12395;&amp;#12418;&amp;#12363;&amp;#12363;&amp;#12431;&amp;#12425;&amp;#12378;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#22269;&amp;#20869;&amp;#12391;&amp;#12399;&amp;#12289;&lt;a href="http://www.hitachi-systems.com/"&gt;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&amp;#26085;&amp;#31435;&amp;#12471;&amp;#12473;&amp;#12486;&amp;#12512;&amp;#12474;&lt;/a&gt;&amp;#12289;&lt;a href="http://www.yahoo.co.jp/"&gt;&amp;#12516;&amp;#12501;&amp;#12540;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&lt;/a&gt;&amp;#12289;&lt;a href="https://enterprise.github.com/stories/cyberagent"&gt;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&amp;#12469;&amp;#12452;&amp;#12496;&amp;#12540;&amp;#12456;&amp;#12540;&amp;#12472;&amp;#12455;&amp;#12531;&amp;#12488;&lt;/a&gt;&amp;#12420;&lt;a href="https://www.youtube.com/watch?v=j1-G14EJRQ8"&gt;&amp;#12464;&amp;#12522;&amp;#12540;&amp;#26666;&amp;#24335;&amp;#20250;&amp;#31038;&lt;/a&gt; &amp;#12394;&amp;#12393;&amp;#12398;&amp;#22823;&amp;#25163;&amp;#20225;&amp;#26989;&amp;#12434;&amp;#12399;&amp;#12376;&amp;#12417;&amp;#12392;&amp;#12375;&amp;#12390;&amp;#12289;&amp;#22810;&amp;#12367;&amp;#12398;&amp;#20808;&amp;#36914;&amp;#30340;&amp;#12394;&amp;#20225;&amp;#26989;&amp;#12395;&amp;#12372;&amp;#27963;&amp;#29992;&amp;#38914;&amp;#12356;&amp;#12390;&amp;#21442;&amp;#12426;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12390;&amp;#20170;&amp;#22238;&amp;#12289;&amp;#12373;&amp;#12425;&amp;#12395;&amp;#36805;&amp;#36895;&amp;#12391;&amp;#12365;&amp;#12417;&amp;#32048;&amp;#12363;&amp;#12356;&amp;#12469;&amp;#12540;&amp;#12499;&amp;#12473;&amp;#12420;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12434;&amp;#25552;&amp;#20379;&amp;#12377;&amp;#12427;&amp;#12383;&amp;#12417;&amp;#12289;GitHub&amp;#12399;&amp;#22823;&amp;#25163;&amp;#20195;&amp;#29702;&amp;#24215;&amp;#12392;&amp;#26989;&amp;#21209;&amp;#25552;&amp;#25658;&amp;#12434;&amp;#34892;&amp;#12356;&amp;#12289;&amp;#26085;&amp;#26412;&amp;#35486;&amp;#12395;&amp;#12424;&amp;#12427;&amp;#12300;GitHub Enterprise&amp;#12301;&amp;#12398;&amp;#27861;&amp;#20154;&amp;#21521;&amp;#12369;&amp;#23566;&amp;#20837;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12418;&amp;#38283;&amp;#22987;&amp;#12375;&amp;#12414;&amp;#12375;&amp;#12383;&amp;#12290;&amp;#12371;&amp;#12398;&amp;#36009;&amp;#22770;&amp;#12497;&amp;#12540;&amp;#12488;&amp;#12490;&amp;#12540;&amp;#25552;&amp;#25658;&amp;#12395;&amp;#12424;&amp;#12426;&amp;#12289;&amp;#20870;&amp;#24314;&amp;#12390;&amp;#27770;&amp;#28168;&amp;#12420;&amp;#26085;&amp;#26412;&amp;#35486;&amp;#12398;&amp;#12486;&amp;#12463;&amp;#12491;&amp;#12459;&amp;#12523;&amp;#12469;&amp;#12509;&amp;#12540;&amp;#12488;&amp;#12418;&amp;#21487;&amp;#33021;&amp;#12395;&amp;#12394;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#12290;&lt;/p&gt;

&lt;h3&gt;GitHub &amp;#12398;&amp;#26368;&amp;#26032;&amp;#12398;&amp;#24773;&amp;#22577;&amp;#12434;&amp;#24471;&amp;#12424;&amp;#12358;&lt;/h3&gt;

&lt;p&gt;&amp;#26481;&amp;#20140;&amp;#12458;&amp;#12501;&amp;#12451;&amp;#12473;&amp;#12391;&amp;#20309;&amp;#12364;&amp;#36215;&amp;#12371;&amp;#12387;&amp;#12390;&amp;#12356;&amp;#12427;&amp;#12363;&amp;#30693;&amp;#12427;&amp;#28858;&amp;#12395;&amp;#12399;Twitter&amp;#12391;  &lt;a href="https://twitter.com/githubjapan"&gt;@GitHubJapan&lt;/a&gt;&amp;#160;&amp;#12434;&amp;#12501;&amp;#12457;&amp;#12525;&amp;#12540;&amp;#12377;&amp;#12427;&amp;#12363;&amp;#12289; &lt;a href="http://github.co.jp/"&gt;github.co.jp&lt;/a&gt;&amp;#12395;&amp;#12450;&amp;#12463;&amp;#12475;&amp;#12473;&amp;#12375;&amp;#12390;&amp;#12367;&amp;#12384;&amp;#12373;&amp;#12356;&amp;#12397;&amp;#12290;&amp;#12381;&amp;#12375;&amp;#12390;&lt;a href="http://ptix.co/1cIsp83"&gt;&amp;#22823;&amp;#38442;&amp;#12391;&amp;#38283;&amp;#20652;&amp;#12373;&amp;#12428;&amp;#12427;user meetup&lt;/a&gt; &amp;#12395;&amp;#12418;&amp;#26159;&amp;#38750;&amp;#12362;&amp;#36234;&amp;#12375;&amp;#12367;&amp;#12384;&amp;#12373;&amp;#12356;&amp;#65281; &amp;#12362;&amp;#24453;&amp;#12385;&amp;#12375;&amp;#12390;&amp;#12362;&amp;#12426;&amp;#12414;&amp;#12377;&amp;#65281;.&lt;/p&gt;

&lt;p&gt;&amp;#12424;&amp;#12429;&amp;#12375;&amp;#12367;&amp;#12362;&amp;#39000;&amp;#12356;&amp;#33268;&amp;#12375;&amp;#12414;&amp;#12377;&amp;#65281;&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:announcing-github-japan-github.html</guid></item><item><title>Atom at CodeConf 2015 · GitHub</title><link>http://ciandcd.github.io/atom-at-codeconf-2015-github.html</link><description>From:&lt;a href="https://github.com/blog/2018-atom-at-codeconf-2015"&gt;https://github.com/blog/2018-atom-at-codeconf-2015&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/4154342/7970619/2b15c3e4-09f4-11e5-89e0-1affcfcf80ba.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/4154342/7970619/2b15c3e4-09f4-11e5-89e0-1affcfcf80ba.png" alt="atom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://codeconf.com"&gt;CodeConf&lt;/a&gt; is coming June 25 &amp;amp; 26 to Nashville and will feature the best that the open source community has to offer.&lt;/p&gt;

&lt;p&gt;We're excited to share that there will be several talks about the &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; ecosystem presented for your enjoyment and edification, kicked off by GitHub CEO &lt;a href="https://github.com/defunkt"&gt;Chris Wanstrath&lt;/a&gt;. Speakers will include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bolinfest"&gt;@bolinfest&lt;/a&gt; talking about &lt;a href="http://nuclide.io"&gt;Nuclide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lee-dohm"&gt;@lee-dohm&lt;/a&gt; talking about the Atom community&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paulcbetts"&gt;@paulcbetts&lt;/a&gt; talking about &lt;a href="https://slack.com"&gt;Slack&lt;/a&gt; and &lt;a href="http://electron.atom.io"&gt;Electron&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also be hosting an Atom workshop led by &lt;a href="https://github.com/nathansobo"&gt;Nathan Sobo&lt;/a&gt;, and a lounge where you will be able to meet with the core team and hack on Atom together.  &lt;/p&gt;

&lt;p&gt;Grab your &lt;a href="http://www.ticketbase.com/events/codeconf-2015"&gt;CodeConf and workshop tickets now&lt;/a&gt; and we'll see you there in Nashville! &lt;/p&gt;


  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:atom-at-codeconf-2015-github.html</guid></item><item><title>Changes to Enterprise Edition subscription pricing</title><link>http://ciandcd.github.io/changes-to-enterprise-edition-subscription-pricing.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/12/price_changes/"&gt;https://www.gitlab.com/2015/06/12/price_changes/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Changes to Enterprise Edition subscription pricing&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;Today we are announcing two changes to GitLab Enterprise Edition subscription pricing.
The changes are intended to better reflect the value of each offering and
ensure our subscription options cater to the needs of different organizations.&lt;/p&gt;

&lt;p&gt;In short, our basic subscription is now $19,10 more expensive, but in 10-user packs.
Our Plus subscription is now $100 more affordable. Standard and terms remain unchanged.&lt;/p&gt;

 


&lt;p&gt;As of today (June 12, 2015) the following will take affect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic Subscriptions will cost $390 per year for a 10-user pack ($39 per user / per year).
Current Basic Subscribers will be offered a 25% discount on this new pricing at their next renewal.
However, new pricing will apply to subsequent renewals and any additional user packs.
Basic subscriptions are now available in 10-user packs, making it slightly more
affordable for small teams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plus Subscriptions will cost $14,900 for a 100-user pack ($149 per user / per year).
Current Plus subscribers will receive a prorated refund on the price differece.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are no changes in the software features or service level of Basic or Plus subscriptions,
which you can view on our &lt;a href="https://about.gitlab.com/pricing/"&gt;website here&lt;/a&gt;.
Standard Subscription pricing will also remain unchanged at $4,900 per year for
each 100-user pack ($49 per user / per year).&lt;/p&gt;

&lt;p&gt;All current quotes will be honored until their expiration (60 days from issue date)
but the new pricing will apply to any subsequent orders, including renewals.&lt;/p&gt;

&lt;p&gt;Our goal is to keep GitLab the most affordable enterprise grade development platform available.
These changes should not have any significant effect on our ability to achieve that.
We felt our Basic plan was underpriced and Plus plan was overpriced.
These changes reduce the price difference between them.&lt;/p&gt;

&lt;p&gt;If you have questions about the changes or about pricing in general,
please contact our sales team at &lt;a href="mailto:sales@gitlab.com."&gt;sales@gitlab.com.&lt;/a&gt;&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:changes-to-enterprise-edition-subscription-pricing.html</guid></item><item><title>Did you install GitLab from source? Check your Git version</title><link>http://ciandcd.github.io/did-you-install-gitlab-from-source-check-your-git-version.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/12/did-you-install-gitlab-from-source-recently-check-your-git-version/"&gt;https://www.gitlab.com/2015/06/12/did-you-install-gitlab-from-source-recently-check-your-git-version/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Did you install GitLab from source? Check your Git version&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;Although the preferred way to install GitLab is to use our &lt;a https: www.gitlab.com downloads&gt;omnibus
packages&lt;/a&gt;, you can also install GitLab Community Edition or
Enterprise Edition &amp;#8216;from source&amp;#8217;. If you used this installation method, and if
you compiled Git from source in the process then please check whether your Git
version defends against Git vulnerability CVE-2014-9390. This issue does not
apply to our Omnibus packages (DEB or RPM).&lt;/p&gt;

 


&lt;p&gt;Although &lt;a https: www.gitlab.com 2014 12 19 gitlab-not-affected-by-cve-2014-9390-git-vulnerability /&gt;GitLab itself is not affected by
CVE-2014-9390&lt;/a&gt;,
a GitLab server may be used to deliver &amp;#8216;poisoned&amp;#8217; Git repositories to users on
vulnerable systems. Upgrading Git on your GitLab server stops users from
pushing poisoned repositories to your GitLab server.&lt;/p&gt;

&lt;p&gt;Due to an oversight, the &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md"&gt;guide for installing GitLab from
source&lt;/a&gt;
still contained instructions telling administrators to install Git 2.1.2 if the
version of Git provided by their Linux distribution was too old. Git 2.1.2 does
not defend against CVE-2014-9390.&lt;/p&gt;

&lt;p&gt;If your GitLab server uses &lt;code&gt;/usr/local/bin/git&lt;/code&gt; please check your Git version
using the instructions in this &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/7.11-to-7.12.md#0-double-check-your-git-version"&gt;upgrade
guide&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:did-you-install-gitlab-from-source-check-your-git-version.html</guid></item><item><title>Feature Highlight: Approve Merge Request</title><link>http://ciandcd.github.io/feature-highlight-approve-merge-request.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/16/feature-highlight-approve-merge-request/"&gt;https://www.gitlab.com/2015/06/16/feature-highlight-approve-merge-request/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Feature Highlight: Approve Merge Request&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;With less than a week until GitLab 7.12, we&amp;#8217;ve got a nice preview for you today:
Merge Request Approvals in GitLab EE.&lt;/p&gt;

&lt;p&gt;Usually you accept a merge request the moment it is ready and reviewed.
But in some cases you want to make sure that every merge request is reviewed
and signed off by several people before merging it.
With GitLab Enterprise Edition 7.12, you can enforce such a workflow
that requires multiple reviewers with the new Merge Request Approval feature.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/feature_approval/mr.png" alt="approve_merge_request"&gt;&lt;/p&gt;

 


&lt;p&gt;To enable approvals, go to project settings page and set the
&amp;#8220;Approvals required&amp;#8221; field to a numeric value. For example, if you set it to &lt;code&gt;3&lt;/code&gt;
each merge request has to receive 3 approvals from different people
before it can be merged through the user interface.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/feature_approval/settings.png" alt="approve_setting"&gt;&lt;/p&gt;

&lt;p&gt;After setting the approval, you will see an &lt;code&gt;Approve&lt;/code&gt; button on merge requests,
rather than an &lt;code&gt;Accept&lt;/code&gt; button. Once the merge request has enough approvals,
you will be able to merge it as usual.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;d love to hear what you think of this new feature in the comments below.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:feature-highlight-approve-merge-request.html</guid></item><item><title>Filter Pull Requests by Status · GitHub</title><link>http://ciandcd.github.io/filter-pull-requests-by-status-github.html</link><description>From:&lt;a href="https://github.com/blog/2014-filter-pull-requests-by-status"&gt;https://github.com/blog/2014-filter-pull-requests-by-status&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;When we shipped &lt;a href="https://github.com/blog/1866-the-new-github-issues"&gt;the new GitHub Issues&lt;/a&gt;, we made it easy to &lt;a href="https://help.github.com/articles/searching-issues/"&gt;scope lists of Issues and Pull Requests&lt;/a&gt; with filters like author, date, mentions, and team mentions. With the new &lt;code&gt;status:&lt;/code&gt; filter you can now filter the Pull Requests in your repositories by &lt;a href="https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref"&gt;combined status&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/483/7819956/1422929e-039a-11e5-98d5-f273b9fe4472.gif" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/483/7819956/1422929e-039a-11e5-98d5-f273b9fe4472.gif" alt="example gif of filtering by status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're taking advantage of the &lt;a href="https://developer.github.com/v3/repos/statuses/"&gt;Status API&lt;/a&gt;, or using an integration that does, try out the new filters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;status:success&lt;/code&gt; Only pull requests with all successful statuses&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status:failure&lt;/code&gt; Only pull requests that have statuses in the &lt;code&gt;failure&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; state&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status:pending&lt;/code&gt; Only pull requests with no statuses or at least one status in the &lt;code&gt;pending&lt;/code&gt; state&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:filter-pull-requests-by-status-github.html</guid></item><item><title>Finding the ‘Needle in a Haystack’ with Helix Threat Detection</title><link>http://ciandcd.github.io/finding-the-needle-in-a-haystack-with-helix-threat-detection.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150617/finding-%E2%80%98needle-haystack%E2%80%99-helix-threat-detection"&gt;http://www.perforce.com/blog/150617/finding-%E2%80%98needle-haystack%E2%80%99-helix-threat-detection&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Software development projects in bigger companies typically involve large teams collaborating across multiple locations. A large corporation may employ tens of thousands of developers working on thousands of projects over a span of many years.&amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/needle-in-haystack-blog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;For many companies, developer access to older software projects and files may continue long after the project has been completed, sometimes because of lax processes and stagnant access control policies. Yet, these projects can represent valuable IP worth tens of millions of dollars. In light of the ramifications of a competitor getting ahold of these files, what can companies do to better protect their crown jewels from theft?&lt;/p&gt;
&lt;p&gt;The answer might be found in the source code management (SCM) or version control tools companies use to drive their development workflows. SCM tools typically track access to key projects and files via audit logs. However, the sheer volume of these logs can overwhelm security teams. A month of log data might yield millions of different interactions with files and projects, making it virtually impossibe to find important clues.&lt;/p&gt;
&lt;p&gt;Done the right way, however, this approach can bring the real threats to the surface. A recent Fortune article entitled&amp;#160;&lt;a href="http://www.forbes.com/sites/benkepes/2015/03/27/using-log-data-and-machine-learning-to-weed-out-the-bad-guys/"&gt;Using Log Data and Machine Learning to Weed out the Bad&amp;#160;Guys&lt;/a&gt;&amp;#160;shares how a large company&amp;#160;applied our Helix Threat Detection capabilities to quickly identify data theft. Likening this approach to &amp;#8216;finding a needle in a haystack,&amp;#8217; the article describes how effective it can be to apply&amp;#160;behavioral analytics to the audit logs in our Helix Versioning Engine.&amp;#160;&lt;/p&gt;
&lt;h4&gt;Leveraging Machine Learning to Establish a Baseline&lt;/h4&gt;
&lt;p&gt;Conventional security tools (e.g., SIEMs) are often rule-based and require time-consuming manual setting of thresholds and iterative tuning of multiple parameters in order to identify anomalous behavior. Yet manually setting alerts to trigger when developers access an arbitrary number of files may be problematic for large projects and can inundate security teams with too many false positives.&lt;/p&gt;
&lt;p&gt;A better approach is to use machine-learning algorithms and risk-based-behavior-analytics models to audit logs to first establish a baseline understanding of normal behavior. It&amp;#8217;s possible to create cluster models that group similar users based on their past activities. Continuous self-learning more accurately identifies high-risk events, like someone accessing a project he or she doesn't normally work on, putting a spotlight on threats to an organization&amp;#8217;s most sensitive assets.&lt;/p&gt;
&lt;h4&gt;Identifying High-Risk Behaviors&lt;/h4&gt;
&lt;p&gt;Once you've establised what's normal behavior, the next step is to apply advanced mathematical models that generate a behavioral risk score. This score represents multiple factors, including the importance of an asset or file, the method of access, the activity (e.g., volume or type), and the user. These behavioral analytics models can then be used to find anomalies by:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Comparing access patterns, data usage patterns and data movement patterns against historic behavior&lt;/li&gt;
&lt;li&gt;Determining similar user patterns across the environment and comparing behavioral patterns between users and groups of users&lt;/li&gt;
&lt;li&gt;Detecting dissimilar patterns among members of the same project group or job role&lt;/li&gt;
&lt;li&gt;Comparing individuals against the entire user group&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To learn more about the behavioral analytics models used in Helix Threat Detection, download the white paper&amp;#160;&lt;a href="http://info.perforce.com/whitepaper-helix-threat-detection.html"&gt;Helix Threat Detection: IP Security and Risk Analytics.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To learn more download our white paper:&lt;br&gt;A Unified Approach to Securing and Protecting IP.&lt;/p&gt;
&lt;a href="http://info.perforce.com/whitepaper-secure-protect-ip-ty.html"&gt;READ NOW&lt;/a&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:finding-the-needle-in-a-haystack-with-helix-threat-detection.html</guid></item><item><title>Focus on your changes in GitHub for Windows · GitHub</title><link>http://ciandcd.github.io/focus-on-your-changes-in-github-for-windows-github.html</link><description>From:&lt;a href="https://github.com/blog/2015-focus-on-your-changes-in-github-for-windows"&gt;https://github.com/blog/2015-focus-on-your-changes-in-github-for-windows&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;GitHub for Windows now makes it even easier to see everything local to your machine, whether it's uncommitted changes or commits you haven't synced yet.&lt;/p&gt;

&lt;p&gt;One of the things you'll notice when creating commits is the new, compact list of changed files in your working directory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920112/0f2085a0-089d-11e5-804b-d42eff5b5987.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920112/0f2085a0-089d-11e5-804b-d42eff5b5987.png" alt="Dedicated view of your local changes"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;GitHub for Windows shows the number of files that a commit changed and lets you drill down to see what changed in a given file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920127/295d7c3e-089d-11e5-9209-8592a431a208.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920127/295d7c3e-089d-11e5-9209-8592a431a208.png" alt="Commit lists now show number of files and lets you select individual files to view changes for"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The updated branch selector now groups your recently used branches so that you can jump straight back in to what you were doing before that pesky hotfix distracted you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920242/011e3d8e-089e-11e5-972c-c9c5ca5ff386.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920242/011e3d8e-089e-11e5-972c-c9c5ca5ff386.png" alt="New branch selector lets you see recently checked out branches"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We've given branch creation a dedicated place in the toolbar. As a bonus, you can pick which branch to base the new one off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/634063/7920243/0122381c-089e-11e5-9d52-d82b168d49f4.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/634063/7920243/0122381c-089e-11e5-9d52-d82b168d49f4.png" alt="The new create branch popover lets you pick which base branch to use for your new branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can collapse the repository list to reclaim some screen space.&lt;/p&gt;

&lt;p&gt;If you have GitHub for Windows installed it will automatically update to the latest version. If you don't have it installed, download GitHub for Windows from &lt;a href="https://windows.github.com"&gt;windows.github.com&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:focus-on-your-changes-in-github-for-windows-github.html</guid></item><item><title>GitLab 7.10.4 released</title><link>http://ciandcd.github.io/gitlab-7104-released.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/11/gitlab-7-dot-10-dot-4-released/"&gt;https://www.gitlab.com/2015/05/11/gitlab-7-dot-10-dot-4-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab 7.10.4 released&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;Last week we had to pull our 7.10.2 release as in a small number of installations
the migrations would fail because of a uniqueness constraint on tags. We
did not release GitLab 7.10.3, as we improved a migration after creating
the 7.10.3 version tag and wanted to include that in our patch release.&lt;/p&gt;

&lt;p&gt;Today we release GitLab 7.10.4 which solves the issues with the migrations
and contains all fixes also present in 7.10.2. If you&amp;#8217;ve already successfully
upgraded to 7.10.2, you do not need to update at this time.&lt;/p&gt;

&lt;p&gt;The fixes in this patch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix migrations broken in 7.10.2&lt;/li&gt;
&lt;li&gt;Add missing indices to tags for some installations&lt;/li&gt;
&lt;li&gt;Make tags for GitLab installations running on MySQL case sensitive&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And the following were fixed with 7.10.2, also included here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bug when using the Gitorious importer&lt;/li&gt;
&lt;li&gt;A bug that prevented adding group members through the admin screen&lt;/li&gt;
&lt;li&gt;Broken links on the merge request page leading to CI services&lt;/li&gt;
&lt;li&gt;A 500 error when trying to search in the wiki&lt;/li&gt;
&lt;li&gt;A 500 error when trying to add new tags to a project&lt;/li&gt;
&lt;li&gt;A bug where commit data would not appear in some subdirectories due to escaped slashes&lt;/li&gt;
&lt;li&gt;A bug where branches with escaped characters in their names would not always work
in the compare view&lt;/li&gt;
&lt;/ul&gt;


 


&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;There is a migration that loops through all tags.
This can take a while for larger installations.&lt;/p&gt;

&lt;p&gt;The upgrade can be performed online.&lt;/p&gt;

&lt;p&gt;Theoretically, there is a small chance that if a tag is created during
the &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/db/migrate/20150425164649_add_taggings_counter_cache_to_tags.acts_as_taggable_on_engine.rb"&gt;migration&lt;/a&gt;
of that specific tag, the tag counter gets a value that is
slightly higher or lower than its actual value. We do not believe this
is reason to schedule downtime and recommend performing the upgrade online.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update, check out our &lt;a href="https://about.gitlab.com/update"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;Omnibus packages for GitLab Enterprise Edition 7.10.4 are available for subscribers &lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/install/packages.md"&gt;here&lt;/a&gt;. For installations from source, use &lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/update/patch_versions.md"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interested in GitLab Enterprise Edition?
For an overview of feature exclusive to GitLab Enterprise Edition please have a look at the &lt;a href="http://about.gitlab.com/features/#enterprise"&gt;features exclusive to GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/subscription/"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles to our upgrade and installation services.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlab-7104-released.html</guid></item><item><title>GitLab 7.10.5 released</title><link>http://ciandcd.github.io/gitlab-7105-released.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/27/gitlab-7-dot-10-dot-5-released/"&gt;https://www.gitlab.com/2015/05/27/gitlab-7-dot-10-dot-5-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab 7.10.5 released&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;In GitLab 7.11 we have &lt;a href="https://about.gitlab.com/2015/05/22/gitlab-7-11-released/"&gt;introduced&lt;/a&gt;
the requirement of a license key for users of GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;This can cause a moment of downtime when upgrading, as you will need to upload
the license key before being able to push to the GitLab instance.&lt;/p&gt;

&lt;p&gt;With this patch release we&amp;#8217;re adding a license upload functionality that allows
you to upload your license in GitLab 7.10.5, preventing downtime when upgrading
to GitLab 7.11 Enterprise Edition.&lt;/p&gt;

&lt;p&gt;This patch release also includes a fix for GitLab Annex and patches a MySQL
vulnerability in GitLab CI.&lt;/p&gt;

&lt;p&gt;If you are not using GitLab Enterprise Edition,
you can skip this patch and go straight to &lt;a href="https://about.gitlab.com/2015/05/22/gitlab-7-11-released/"&gt;GitLab 7.11&lt;/a&gt;.&lt;/p&gt;

 


&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;This is a minor update, without any migrations.
No downtime is necessary.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update, check out our &lt;a href="https://about.gitlab.com/update"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Enterprise Edition user, if you want to update to 7.10.5 rather than straight to 7.11,
download and install the Omnibus package
&lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/install/packages.md"&gt;at the old download location, here.&lt;/a&gt;.
For installations from source, use &lt;a href="https://gitlab.com/subscribers/gitlab-ee/blob/master/doc/update/patch_versions.md"&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;Interested in GitLab Enterprise Edition?
For an overview of feature exclusive to GitLab Enterprise Edition please have a look at the &lt;a href="http://about.gitlab.com/features/#enterprise"&gt;features exclusive to GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/pricing"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles to our upgrade and installation services.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlab-7105-released.html</guid></item><item><title>GitLab 7.11 released with Two-factor Authentication and a publicly viewable Enterprise Edition</title><link>http://ciandcd.github.io/gitlab-711-released-with-two-factor-authentication-and-a-publicly-viewable-enterprise-edition.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/22/gitlab-7-11-released/"&gt;https://www.gitlab.com/2015/05/22/gitlab-7-11-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;It&amp;#8217;s the 22nd of the month, so we have a new GitLab release ready!
GitLab 7.11 brings more improvements to the look and feel of GitLab,
two-factor authentication, a version check and more!&lt;/p&gt;

&lt;p&gt;Of course we&amp;#8217;re also releasing GitLab CI 7.11, with a new backup and restore
utility, improvements in the UI and other new features.&lt;/p&gt;

&lt;p&gt;This month&amp;#8217;s MVP is &lt;a href="http://jamesnewton.com/"&gt;James Newton&lt;/a&gt; (newton on IRC)!
James is very active on our &lt;code&gt;#gitlab&lt;/code&gt; IRC channel, often helping people out
with issues or helping people getting started with GitLab. We&amp;#8217;re very
happy to have James supporting the community and believe that is deserving
of a MVP award!
Thanks James!&lt;/p&gt;

 


&lt;h2&gt;Better looking sidebar&lt;/h2&gt;

&lt;p&gt;We changed the look of the sidebar to reflect its function better and make it look
more pretty:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/sidebar.png" alt="The new sidebar in GitLab 7.11"&gt;&lt;/p&gt;

&lt;h2&gt;Clean project dashboard&lt;/h2&gt;

&lt;p&gt;The project dashboard was a good example of design by committee, one GitLab
contributor noted. We broomed through it and cleaned it up:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/project.png" alt="Project Dashboard in GitLab 7.11"&gt;&lt;/p&gt;

&lt;h2&gt;Two-factor authentication&lt;/h2&gt;

&lt;p&gt;Keep your code more secure and start using two-factor authentication (2FA)!
GitLab has built-in 2FA in both CE and EE now and makes use of the convenient
Google Authenticator.&lt;/p&gt;

&lt;p&gt;All you have to do is go to your Profile &amp;gt; Account and scan the QR code using
Google&amp;#8217;s app.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/2fa.png" alt="two-factor authentication"&gt;&lt;/p&gt;

&lt;p&gt;From now on, on login you&amp;#8217;ll be required to provide the code the app gives you
for GitLab. Two-factor authentication only works with the web-UI for now.&lt;/p&gt;

&lt;h2&gt;User roles in comments&lt;/h2&gt;

&lt;p&gt;Now you know who&amp;#8217;s who in your favorite project. On comments you will see
the role of the person in that project:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/roles.png" alt="not an actual conversation"&gt;&lt;/p&gt;

&lt;h2&gt;Task lists everywhere&lt;/h2&gt;

&lt;p&gt;Want a task list in the comments? Now you can!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/task.png" alt="Task list in comments"&gt;&lt;/p&gt;

&lt;h2&gt;Version Check&lt;/h2&gt;

&lt;p&gt;GitLab releases a new version every single month on the 22nd, so we understand
that people are not always up to date. We wanted to give you some help with
this, so from now on you can quickly see which version of GitLab you have running
by visiting the Help or Admin page. It will show if you are up to date and
if there is a security release you should have installed.&lt;/p&gt;

&lt;p&gt;Read more about the version check in our &lt;a href="https://about.gitlab.com/2015/05/07/version-check/"&gt;blog post about it.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can turn off the version check under Admin &amp;gt; Settings.&lt;/p&gt;

&lt;h2&gt;License keys for Enterprise Edition&lt;/h2&gt;

&lt;p&gt;GitLab Enterprise Edition used to live in a private repository, which was fine up
until now. However, with the addition of our package server, we want
to make it easier to start using GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;Rather than locking up the package repository of GitLab EE, we decided to
open up all the code and &lt;a href="https://packages.gitlab.com/gitlab/gitlab-ee"&gt;packages&lt;/a&gt; and start using license keys. The code
is still proprietary, but now is &lt;a href="https://gitlab.com/gitlab-org/gitlab-ee/"&gt;publicly viewable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has several advantages. The installation of GitLab EE becomes as easy as
installing GitLab CE. You no longer needs access to specific repositories,
rather you can download it using the same methods as CE (including AWS/Azure templates, Docker images, etc).&lt;/p&gt;

&lt;p&gt;In addition, the code for Enterprise Edition is now becoming open to inspect
for everyone. This will make it easier to send enhancements and makes it easier
to do a trial of Enterprise Edition.&lt;/p&gt;

&lt;p&gt;Getting organizations to purchase a subscription after their trial expires or
at renewal time sometimes took a substantial effort from us.
We don&amp;#8217;t want to raise prices for customers that renew without prompting because
we need to invest more time in unresponsive customers.
Therefore we decided to introduce license keys that prompt customers automatically.
We regret the inconvenience that license keys introduce
but we think it is the best solution to keep prices low.&lt;/p&gt;

&lt;h2&gt;True-up model for subscriptions&lt;/h2&gt;

&lt;p&gt;The worst thing about license keys is that they can be very inflexible.
Most GitLab installations quickly grow in popularity within the organization.
Having to purchase a new license key every time this happens is very inefficient.
Also, we noticed that the majority of our customers didn&amp;#8217;t have a compliant subscription, for us this indicates that having to renew the subscription multiple times a year is very inconvenient.&lt;/p&gt;

&lt;p&gt;Therefore we will switch to a true-up model that allows you to grow now and pay later.
When you get a new license you should get it for your current number of active users.
For users that are added during the year you pay half price when you renew.&lt;/p&gt;

&lt;p&gt;So if you have 100 active users today you get a 100 user subscription.
Suppose that when you renew a year from now you have 300 active users.
You pay for a 300 user subscription and pay half a year for the 200 users that you added during the year.&lt;/p&gt;

&lt;h3&gt;Getting the license key&lt;/h3&gt;

&lt;p&gt;If you are currently a GitLab customer, you should have received your license
key already at the email you registered with your payment. You can also email
&lt;code&gt;sales at gitlab dot com&lt;/code&gt; to request it at any time.&lt;/p&gt;

&lt;p&gt;New subscribers will receive their license key automatically.&lt;/p&gt;

&lt;h3&gt;Installing the license key&lt;/h3&gt;

&lt;p&gt;To install the license, vist &lt;code&gt;/admin/license&lt;/code&gt; in your GitLab instance as an
admin. Here you can upload your &lt;code&gt;.gitlab-license&lt;/code&gt; file, which will instantly
unlock GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/license.png" alt="Installing your license"&gt;&lt;/p&gt;

&lt;p&gt;You can also download and review your current license here.&lt;/p&gt;

&lt;p&gt;Please note that we will release GitLab 7.10.5 soon, that will allow you to
upload the license key to your GitLab instance before upgrading, to avoid
unnecessary downtime.&lt;/p&gt;

&lt;h2&gt;Two-Factor Authentication for LDAP / Active Directory (EE-only)&lt;/h2&gt;

&lt;p&gt;Want to use two-factor authentication together with your LDAP or Active Directory
integration? With GitLab Enterprise Edition you can.&lt;/p&gt;

&lt;h2&gt;New GitLab CI Features&lt;/h2&gt;

&lt;p&gt;With the release of GitLab 7.11, we also updated GitLab CI to 7.11.
Some changes worth mentioning are an improved runners page,
public accessible build and commit pages for public projects
, a new backup/restore utility that will backup your CI database and
HipChat notifications!&lt;/p&gt;

&lt;h2&gt;Other awesome changes in GitLab CE&lt;/h2&gt;

&lt;p&gt;We can never cover all the new stuff in each GitLab release, but these
are worth to have a quick look at as well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick quote-reply&lt;/strong&gt; You can now reply with a quotation by simply selecting text in an issue
or merge request and pressing &lt;code&gt;r&lt;/code&gt;. It will set the focus to the editing window
and have the quoted text already in it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atom feeds for all!&lt;/strong&gt; There is now an atom feed for each project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Settings in admin UI&lt;/strong&gt; We moved default project and snippet visibility settings
to the admin web interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improved UI for mobile&lt;/strong&gt; GitLab is now better viewable on mobile!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WIP your MRs!&lt;/strong&gt; If you add &lt;code&gt;WIP&lt;/code&gt; or &lt;code&gt;[WIP]&lt;/code&gt; (work in progress) to the start of the title of a merge request,
it will be protected from merging now.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_11/wip.png" alt="WIP blocking the merge request of this blog post!"&gt;&lt;/p&gt;

&lt;p&gt;This release has more improvements, including security fixes, please check out &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/CHANGELOG"&gt;the Changelog&lt;/a&gt; to see the all named changes.&lt;/p&gt;

&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;Coming from 7.10, the migrations in 7.11 are pretty fast (under 1 minute), but one of them is tricky:
we rename any existing users with names ending in a period (&amp;#8216;.&amp;#8217;).
This migration updates both the database and the filesystem and previous versions
of this migration have proven to be fragile.&lt;/p&gt;

&lt;p&gt;If you have no user namespaces with paths ending in &amp;#8216;.&amp;#8217; in your database and if you trust your users not to
create any until after you upgrade to GitLab 7.11 you can perform this upgrade online.
If not, we recommend to take downtime (this is what we did for gitlab.com).
You can find the current number of affected database records with the following command:&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt; sudo gitlab-rails runner "puts Namespace.where(type: nil).where(%q{path LIKE '%.'}).count"&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;




&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you are setting up a new GitLab installation please see the &lt;a href="https://www.gitlab.com/installation/"&gt;installing GitLab page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;Check out our &lt;a href="https://about.gitlab.com/update/"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please note that cookbook-omnibus-gitlab, our Chef cookbook that installs/manages GitLab omnibus packages,
does not yet support packages.gitlab.com. See &lt;a href="https://gitlab.com/gitlab-org/cookbook-omnibus-gitlab/issues/8"&gt;this issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;The mentioned EE-only features and things like LDAP group support can be found in GitLab Enterprise Edition.
For a complete overview please have a look at the &lt;a href="http://www.gitlab.com/gitlab-ee/"&gt;feature list of GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/pricing/"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles you to our upgrade and installation services.&lt;/p&gt;



                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlab-711-released-with-two-factor-authentication-and-a-publicly-viewable-enterprise-edition.html</guid></item><item><title>GitLab 7.11.4 released</title><link>http://ciandcd.github.io/gitlab-7114-released.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/28/gitlab-7-dot-11-dot-4-released/"&gt;https://www.gitlab.com/2015/05/28/gitlab-7-dot-11-dot-4-released/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab 7.11.4 released&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We&amp;#8217;ve released GitLab 7.11.4 for GitLab CE, EE and CI.&lt;/p&gt;

&lt;p&gt;It includes the following fixes for CE and EE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix rendering of list bullets&lt;/li&gt;
&lt;li&gt;Force a &lt;code&gt;rel="nofollow"&lt;/code&gt; attribute on all external links in markdown&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For GitLab Enterprise Edition this patch release also fixes a bug in
git-annex. This fix was also included in the (unannounced) 7.11.3 patch.&lt;/p&gt;

 


&lt;h2&gt;Upgrade barometer&lt;/h2&gt;

&lt;p&gt;This is a minor update, without any migrations.
No downtime is necessary.&lt;/p&gt;

&lt;h2&gt;Updating&lt;/h2&gt;

&lt;p&gt;To update, check out our &lt;a href="https://about.gitlab.com/update"&gt;update page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Enterprise Edition&lt;/h2&gt;

&lt;p&gt;Interested in GitLab Enterprise Edition?
For an overview of feature exclusive to GitLab Enterprise Edition please have a look at the &lt;a href="http://about.gitlab.com/features/#enterprise"&gt;features exclusive to GitLab EE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access to GitLab Enterprise Edition is included with a &lt;a href="http://www.gitlab.com/pricing"&gt;subscription&lt;/a&gt;.
No time to upgrade GitLab yourself?
A subscription also entitles to our upgrade and installation services.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlab-7114-released.html</guid></item><item><title>GitLab, Gitorious, and Free Software</title><link>http://ciandcd.github.io/gitlab-gitorious-and-free-software.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/20/gitlab-gitorious-free-software/"&gt;https://www.gitlab.com/2015/05/20/gitlab-gitorious-free-software/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab, Gitorious, and Free Software&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;This is a guest post by &lt;a href="http://mikegerwitz.com/"&gt;Mike Gerwitz&lt;/a&gt;, a &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software&lt;/a&gt; hacker and
 activist, and author of &lt;a href="https://gnu.org/software/easejs"&gt;GNU ease.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In early March of this year, it was announced that
&lt;a href="https://about.gitlab.com/2015/03/03/gitlab-acquires-gitorious/"&gt;GitLab would acquire Gitorious&lt;/a&gt; and shut down &lt;code&gt;gitorious.org&lt;/code&gt; by 1
June, 2015.  &lt;a href="https://news.ycombinator.com/item?id=9138419"&gt;Reactions from the community&lt;/a&gt; were mixed, and
understandably so: while GitLab itself is a formidable alternative to wholly
proprietary services, its acquisition of Gitorious strikes a chord with the
free software community that gathered around Gitorious in the name of
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;.&lt;/p&gt;

 


&lt;p&gt;After hearing that announcement,
&lt;a href="http://mikegerwitz.com/"&gt;as a free software hacker and activist myself&lt;/a&gt;, I was naturally
uneasy.  Discussions of alternatives to Gitorious and GitLab ensued on the
&lt;a href="https://lists.gnu.org/mailman/listinfo/libreplanet-discuss"&gt;&lt;code&gt;libreplanet-discuss&lt;/code&gt;&lt;/a&gt; mailing list.  Sytse Sijbrandij (GitLab
B.V. CEO) happened to be present on that list;
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-03/msg00075.html"&gt;I approached him very sternly&lt;/a&gt; with a number of concerns, just as I
would with anyone that I feel does not understand certain aspects of the
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software philosophy&lt;/a&gt;.  To my surprise, this was not the case at
all.&lt;/p&gt;

&lt;p&gt;Sytse has spent a lot of time accepting and considering community input for
both the Gitorious acquisition and GitLab itself.  He has also worked with
me to address some of the issues that I had raised.  And while these issues
won&amp;#8217;t address everyone&amp;#8217;s concerns, they do strengthen GitLab&amp;#8217;s commitment to
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;, and are commendable.&lt;/p&gt;

&lt;p&gt;I wish to share some of these details here; but to do so, I first have to
provide some background to explain what the issues are, and why they are
important.&lt;/p&gt;

&lt;h2&gt;Free Software Ideology&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gitorious.org/"&gt;Gitorious&lt;/a&gt; was (and still is) one of the most popular Git repository
hosts, and largely dominated until the introduction of GitHub.  But even as
users flocked to &lt;a href="http://mikegerwitz.com/about/githubbub"&gt;GitHub&amp;#8217;s proprietary services&lt;/a&gt;, users who value freedom
continued to support Gitorious, both on &lt;code&gt;gitorious.org&lt;/code&gt; and by installing
their own instances on their own servers.  Since Gitorious is
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software&lt;/a&gt;, users are free to study, modify, and share it with
others.  But &lt;a href="https://www.gnu.org/philosophy/who-does-that-server-really-serve.html"&gt;software freedom does not apply to Services as a
Software Substitute (SaaSS)&lt;/a&gt; or remote services&amp;#8212;you cannot apply the
&lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;four freedoms&lt;/a&gt; to something that you do not yourself possess&amp;#8212;so why do
users still insist on using &lt;code&gt;gitorious.org&lt;/code&gt; despite this?&lt;/p&gt;

&lt;p&gt;The matter boils down to supporting a philosophy:  The
&lt;a href="https://www.gnu.org/licenses/gpl.html"&gt;GNU General Public License (GPL)&lt;/a&gt; is a license that turns copyright on
its head: rather than using copyright to restrict what users can do with a
program, the GPL instead &lt;a href="https://www.gnu.org/licenses/quick-guide-gplv3.html"&gt;ensures users' freedoms&lt;/a&gt; to study, modify, and
share it.  But that isn&amp;#8217;t itself enough: to ensure that the software always
remains free (as in freedom), the GPL ensures that all derivatives are
also licensed under similar terms.  This is known as &lt;a href="https://www.gnu.org/philosophy/pragmatic.html"&gt;copyleft&lt;/a&gt;, and it
is vital to the free software movement.&lt;/p&gt;

&lt;p&gt;Gitorious is licensed under the
&lt;a href="https://www.gnu.org/licenses/agpl.html"&gt;GNU Affero General Public License Version 3 (AGPLv3)&lt;/a&gt;&amp;#8212;this takes the
&lt;a href="https://www.gnu.org/licenses/gpl.html"&gt;GPL&lt;/a&gt; and adds an additional requirement: if a modified version of the
program is run on a sever, users communicating with the program on that
server must have access to the modified program&amp;#8217;s source code.  This ensures
that &lt;a href="https://www.gnu.org/licenses/why-affero-gpl.html"&gt;modifications to the program are available to all users&lt;/a&gt;; they
would otherwise be hidden in private behind the server, with others unable
to incorporate, study, or share them.  The AGPLv3 is an ideal license for
Gitorious, since most of its users will only ever interact with it over a
network.&lt;/p&gt;

&lt;p&gt;GitLab is also free software: its &lt;a href="https://www.gnu.org/licenses/license-list.html#Expat"&gt;Expat license&lt;/a&gt; (commonly referred to
ambiguously as the &amp;#8220;MIT license&amp;#8221;) permits all of the same freedoms that
are granted under the the GNU GPL.  But it does so in a way that is highly
permissive: it permits relicensing under any terms, free or not.  In other
words, one can fork GitLab and derive a proprietary version from it, making
changes that deny users &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;their freedoms&lt;/a&gt; and cannot be incorporated back
into the original work.&lt;/p&gt;

&lt;p&gt;This is the issue that the free software community surrounding Gitorious has
a problem with: any changes contributed to GitLab could in turn benefit a
proprietary derivative.  This situation isn&amp;#8217;t unique to GitLab: it applies
to all non-copyleft (&amp;#8220;permissive&amp;#8221;) &lt;a href="https://www.gnu.org/licenses/license-list.html"&gt;free software licenses&lt;/a&gt;.  And this
issue is realized by GitLab itself in the form of its GitLab Enterprise
Edition (GitLab EE): a proprietary derivative that adds additional
features atop of GitLab&amp;#8217;s free Community Edition (CE).  For this reason,
many free software advocates are uncomfortable contributing to GitLab, and
feel that they should instead support other projects; this, in turn, means
not supporting GitLab by using and drawing attention to their hosting
services.&lt;/p&gt;

&lt;p&gt;The copyleft vs. permissive licensing debate is one of the free software
movement&amp;#8217;s most heated.  I do not wish to get into such a debate here.  One
thing is clear: GitLab Community Edition (GitLab CE) is free
software.  Richard Stallman (RMS) &lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-03/msg00095.html"&gt;responded directly to the thread on
&lt;code&gt;libreplanet-discuss&lt;/code&gt;&lt;/a&gt;, stating plainly:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; We have a simple way of looking at these two versions.  The free
 version is free software, so it is ethical.  The nonfree version is
 nonfree software, so it is not ethical.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does GitLab CE deserve attention from the free software community?  I
believe so.  Importantly, there is another strong consideration: displacing
proprietary services like GitHub and Bitbucket, which host a large number of
projects and users.  GitLab has a strong foothold, which is an excellent
place for a free software project to be in.&lt;/p&gt;

&lt;p&gt;If we are to work together as a community, we need to respect GitLab&amp;#8217;s
free licensing choices just as we expect GitLab to respect ours.  Providing
respect does not mean that you are conceding: I will never personally use a
non-copyleft license for my software; I&amp;#8217;m firmly rooted in my dedication to
the &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;free software philosophy&lt;/a&gt;, and I&amp;#8217;m sure that many other readers are
too.  But using a non-copyleft license, although many of us consider it to
be a weaker alternative, &lt;a href="https://www.fsf.org/blogs/rms/selling-exceptions"&gt;is not wrong&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Free JavaScript&lt;/h2&gt;

&lt;p&gt;As I mentioned above,
&lt;a href="https://www.gnu.org/philosophy/who-does-that-server-really-serve.html"&gt;software freedom and network services are separate issues&lt;/a&gt;&amp;#8212;the four
freedoms do not apply to interacting with &lt;code&gt;gitlab.com&lt;/code&gt; purely over a network
connection, for example, because you are not running its software on your
computer.  However, there is an overlap: JavaScript code downloaded to be
executed in your web browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gnu.org/philosophy/javascript-trap.html"&gt;Non-free JavaScript&lt;/a&gt; is a particularly nasty concern: it is software
that is downloaded automatically from a server&amp;#8212;often without prompting
you&amp;#8212;and then immediately executed.  Software is now being executed on your
machine, and &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;your four freedoms&lt;/a&gt; are once again at risk.  This, then,
&lt;a href="https://www.gnu.org/software/easejs/whyfreejs.html"&gt;is the primary concern&lt;/a&gt; for any users visiting &lt;code&gt;gitlab.com&lt;/code&gt;: not only
would this affect users that use &lt;code&gt;gitlab.com&lt;/code&gt; as a host, but it would also
affect any user that visits the website.  That would be a problem, since
hosting your project there would be inviting users to run proprietary
JavaScript.&lt;/p&gt;

&lt;p&gt;As I was considering migrating my projects to GitLab, this was the
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-04/msg00019.html"&gt;first concern I brought up to Sytse&lt;/a&gt;.  This problem arises because
&lt;code&gt;gitlab.com&lt;/code&gt; uses a GitLab EE instance: if it had used only its Community
Edition (GitLab CE)&amp;#8212;which is free software&amp;#8212;then all served JavaScript
would have been free.  But any scripts served by GitLab EE that are not
identical to those served by GitLab CE are proprietary, and therefore
unethical.  This same concern applies to GitHub, Bitbucket, and other
proprietary hosts that serve JavaScript.&lt;/p&gt;

&lt;p&gt;Sytse surprised me by stating that he would be willing to
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-04/msg00020.html"&gt;freely license all JavaScript in GitLab EE&lt;/a&gt;, and by offering to give
anyone access to the GitLab EE source code who wants to help out.  I took
him up on that offer.  Initially, I had submitted a patch to merge all
GitLab EE JavaScript into GitLab CE, but Sytse came up with another,
superior suggestion, that ultimately provided even greater reach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&amp;#8217;m pleased to announce that Sytse and I were able to agree on a license
change (with absolutely no friction or hesitation on his part) that
liberates all JavaScript served to the client from GitLab EE instances.&lt;/strong&gt;
There are two concerns that I had wanted to address: JavaScript code
directly written for the client, and any code that produced JavaScript as
output.  In the former case, this includes JavaScript derived from other
sources: for example, GitLab uses CoffeeScript, which compiles into
JavaScript.  The latter case is important: if there is any code that
generates fragments of JavaScript&amp;#8212;e.g. dynamically at runtime&amp;#8212;then that
code must also be free, or users would not be able to modify and share the
resulting JavaScript that is actually being run on the client.  Sytse
accepted my change verbatim, while adding his own sentence after mine to
disambiguate.  At the time of writing this post, GitLab EE&amp;#8217;s source code
isn&amp;#8217;t yet publicly visible, so here is the relevant snippet from its
&lt;code&gt;LICENSE&lt;/code&gt; file:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The above copyright notices applies only to the part of this Software that
is not distributed as part of GitLab Community Edition (CE), and that is
not a file that produces client-side JavaScript, in whole or in part. Any
part of this Software distributed as part of GitLab CE or that is a file
that produces client-side JavaScript, in whole or in part, is copyrighted
under the MIT Expat license.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Further Discussion&lt;/h2&gt;

&lt;p&gt;My discussions with Sytse did not end there: there are other topics that
have not been able to be addressed before my writing of this post that would
do well to demonstrate commitment toward &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The license change liberating client-side JavaScript was an excellent
move.  To expand upon it, I wish to submit a patch that would make GitLab
&lt;a href="https://www.gnu.org/software/librejs/free-your-javascript.html"&gt;LibreJS compliant&lt;/a&gt;; this provides even greater guarantees, since it
would allow for users to continue to block other non-free JavaScript that
may be served by the GitLab instance, but not produced by it.  For example:
a website/host that uses GitLab may embed proprietary JavaScript, or modify
it without releasing the source code.  Another common issue is the user of
analytics software; &lt;code&gt;gitlab.com&lt;/code&gt; uses Google Analytics.&lt;/p&gt;

&lt;p&gt;If you would like to help with LibreJS compliance, please &lt;a href="http://mikegerwitz.com/"&gt;contact me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was brought into another discussion between Sytse and RMS that is
unrelated to the GitLab software itself, but still a positive demonstration
of a commitment to &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;software freedom&lt;/a&gt;&amp;#8212;the replacement of Disqus on the
&lt;code&gt;gitlab.com&lt;/code&gt; blog with a free alternative.  Sytse ended up making a
suggestion, saying he&amp;#8217;d be &amp;#8220;happy to switch to&amp;#8221; &lt;a href="https://github.com/phusion/juvia"&gt;Juvia&lt;/a&gt; if I&amp;#8217;d help with
the migration.  I&amp;#8217;m looking forward to this, as it is an important
discussion area (that I honestly didn&amp;#8217;t know existed until Sytse told me
about it, because I don&amp;#8217;t permit proprietary JavaScript!).  He was even kind
enough to compile a PDF of comments for one of our discussions, since he was
cognizant ahead of time that I would not want to use Disqus.  (Indeed, I
will be unable to read and participate in the comments to this guest post
unless I take the time to freely read and reply without running Disqus'
proprietary JavaScript.)&lt;/p&gt;

&lt;p&gt;Considering the genuine interest and concern expressed by Sytse in working
with myself and the free software community, I can only expect that GitLab
will continue to accept and apply community input.&lt;/p&gt;

&lt;h2&gt;Actions Speak Louder Than Words&lt;/h2&gt;

&lt;p&gt;It is not possible to address the copyleft issue without a change in
license, which GitLab is not interested in doing.  So the best way to
re-assure the community is through action.  &lt;a href="https://news.ycombinator.com/item?id=9141801"&gt;To quote Sytse&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think the only way to prove we&amp;#8217;re serious about open source is in our
actions, licenses or statements don&amp;#8217;t help.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are fundamental disagreements that will not be able to be
resolved between GitLab and the free software community&amp;#8212;like their
&lt;a href="https://lists.gnu.org/archive/html/libreplanet-discuss/2015-03/msg00076.html"&gt;&amp;#8220;open core&amp;#8221; business model&lt;/a&gt;.  But after working with Sytse and seeing
his interactions with myself, RMS, and many others in the free software
community, I find his actions to be very encouraging.&lt;/p&gt;

&lt;p&gt;Are you interested in helping other websites liberate their JavaScript?
 Consider &lt;a href="https://fsf.org/campaigns/freejs"&gt;joining the FSF&amp;#8217;s campaign&lt;/a&gt;, and
 &lt;a href="https://www.gnu.org/software/easejs/whyfreejs.html"&gt;please liberate your own&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This post is licensed under the
 &lt;a href="http://creativecommons.org/licenses/by-sa/3.0/"&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlab-gitorious-and-free-software.html</guid></item><item><title>GitLab.com and Logjam</title><link>http://ciandcd.github.io/gitlabcom-and-logjam.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/17/gitlab-com-and-logjam/"&gt;https://www.gitlab.com/2015/06/17/gitlab-com-and-logjam/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab.com and Logjam&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We&amp;#8217;ve previously announced &lt;a href="https://about.gitlab.com/2015/05/21/security-advisory-for-logjam-vulnerability/"&gt;security advisory for Logjam vulnerability&lt;/a&gt;. In that announcement we&amp;#8217;ve mentioned that GitLab.com is using 1024-bit DH groups to retain compatibility with older Java-based clients.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve updated the default/recommended SSL ciphers for all GitLab installations and implemented new ciphers on GitLab.com.&lt;/p&gt;

 


&lt;p&gt;After some reasearch and testing we&amp;#8217;ve decided to change the SSL cipher suite served by the web server/load balancer.&lt;/p&gt;

&lt;p&gt;This decision was made after weighing on the trade-offs between having the stronger DH params and denying access to Java 6 based clients.&lt;/p&gt;

&lt;h4&gt;Using 2048-bit DHE params&lt;/h4&gt;

&lt;p&gt;Generating the 2048-bit DHE params was advised to help against the Logjam vulnerability. While this is a way to go for most servers, with GitLab.com we have to keep in mind that we have users using older Java-based clients.
Adopting the stronger params suites would prevent those users using GitLab.com completely.
Although the number of these users is not high, denying them access does not seem like an option.&lt;/p&gt;

&lt;h4&gt;Removing DHE suites&lt;/h4&gt;

&lt;p&gt;DHE suites have a couple of issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.qualys.com/blogs/securitylabs/2013/06/25/ssl-labs-deploying-forward-secrecy"&gt;DHE is slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not all browsers support all the necessary suites&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One advantage of having DHE together with ECDHE suites is that this allows forward secrecy to all clients.&lt;/p&gt;

&lt;p&gt;We then turned to investigating how others are handling this issue and we found out that, for example, Google sites mostly &lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.google.com"&gt;do not have DHE suites in their configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this in mind we&amp;#8217;ve tried removing the DHE suites and the result was as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All major browsers and clients retain forward secrecy using ECDHE&lt;/li&gt;
&lt;li&gt;SSL labs score went from B to A&lt;/li&gt;
&lt;li&gt;There is no forward secrecy for Android 2.3.7, Java 6 and OpenSSL 0.9.8&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After considering the trade-offs, we&amp;#8217;ve decided to remove the DHE suites from our cipher suite on GitLab.com.&lt;/p&gt;

&lt;p&gt;Forward secrecy is now denied for Android 2.3.7, Java 6 and OpenSSL 0.9.8 but we suspect that number of users affected will be extremely low.&lt;/p&gt;

&lt;p&gt;We have also updated the recommended configurations for omnibus-gitlab packages and GitLab installation from source.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlabcom-and-logjam.html</guid></item><item><title>GitLab.com outage on 2015-05-29</title><link>http://ciandcd.github.io/gitlabcom-outage-on-2015-05-29.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/04/gitlab-dot-com-outage-on-2015-05-29/"&gt;https://www.gitlab.com/2015/06/04/gitlab-dot-com-outage-on-2015-05-29/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;GitLab.com outage on 2015-05-29&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;GitLab.com suffered an outage from  2015-05-29 01:00 to 2015-05-29 02:34 (times in UTC).
In this blog post we will discuss what happened, why it took so long to recover the service, and what we are doing to reduce the likelihood and impact of such incidents.&lt;/p&gt;

 


&lt;h1&gt;Background&lt;/h1&gt;

&lt;p&gt;GitLab.com is provided and maintained by the team of GitLab B.V., the company behind GitLab.
On 2015-05-02 we performed a major infrastructure upgrade, moving GitLab.com from a single server to a small cluster of servers, consisting of a load balancer (running HAproxy), three workers (NGINX/Unicorn/Sidekiq/gitlab-shell) and a backend server (PostgreSQL/Redis/NFS).
This new infrastructure configuration improved the responsiveness of GitLab.com, at the expense of having more moving parts.&lt;/p&gt;

&lt;p&gt;GitLab.com is backed up using Amazon EBS snapshots.
To protect against inconsistent snapshots our backup script &amp;#8216;freezes&amp;#8217; the filesystem on the backend server with &lt;code&gt;fsfreeze&lt;/code&gt; prior to making EBS snapshots, and &amp;#8216;unfreezes&amp;#8217; the filesystem immediately after.&lt;/p&gt;

&lt;h1&gt;Timeline&lt;/h1&gt;

&lt;p&gt;Italic comments below are written with the knowledge of hindsight&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1:00 The GitLab.com backup script is activated by Cron on the backend server.
For unknown reasons, the backup script hangs/crashes before or during the &amp;#8216;unfreeze&amp;#8217; of the filesystem holding all user data.&lt;/li&gt;
&lt;li&gt;1:07 Our on-call engineer is paged by &lt;a href="http://status.gitlab.com"&gt;Pingdom&lt;/a&gt;.
The on-call engineer tries to diagnose the issue on the worker servers but is unable to diagnose the problem.
The issue was on the backend server, not on the workers.&lt;/li&gt;
&lt;li&gt;1:30 The on-call engineer decides to call in more help.
The other team members with access and knowledge to resolve the issue are all in Europe at this time, where it is 3:30/4:30am.&lt;/li&gt;
&lt;li&gt;1:45 A second engineer in Europe has been woken up and takes the lead on the investigation of the outage.
More workers are rebooted because they appear to be stuck.
It becomes apparent that the workers cannot mount the NFS share which holds all Git repository data.&lt;/li&gt;
&lt;li&gt;1:51 One of the engineers notices that the load on the backend server is more than 150. A normal value would be less than 5.&lt;/li&gt;
&lt;li&gt;2:10 The engineers give up on running commands on the workers to bring the NFS share back, and start investigating the backend server.
The engineers discuss whether they should reboot the backend server but they are unsure if it is safe given that this setup is fairly new.&lt;/li&gt;
&lt;li&gt;2:21 The engineers reboot the backend server.
The reboot is taking a long time.
The AWS &amp;#8216;reboot&amp;#8217; command first tries a soft reboot, and only does a hard reboot after a 4-minute timeout.
The soft reboot probably hung when it tried to shut down services that were trying to write to the &amp;#8216;frozen&amp;#8217; disk.&lt;/li&gt;
&lt;li&gt;2:30 The backend server has rebooted and the engineers regain SSH access to it.
The worker servers are able to mount the NFS share now but GitLab.com is still not functioning because the Postgres database server is not responding.
One of the engineers restarts Postgres on the backend server.
It may have been that Postgres was still busy performing crash recovery.&lt;/li&gt;
&lt;li&gt;2:34 Gitlab.com is available again.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Root causes&lt;/h1&gt;

&lt;p&gt;Although we cannot explain what went wrong with the backup script it is hard to come to another conclusion that something did go wrong with it.&lt;/p&gt;

&lt;p&gt;The length of the outage was caused by insufficient training and documentation for our on-call engineers following the infrastructure upgrade rolled out on May 2nd.&lt;/p&gt;

&lt;h1&gt;Next steps&lt;/h1&gt;

&lt;p&gt;We have removed the freeze/unfreeze steps from our backup script.
Because this (theoretically) increases the risk of occasional corrupt backups we have added a second backup strategy for our SQL data.
In the future we would like to have automatical validation of our GitLab.com backups.&lt;/p&gt;

&lt;p&gt;The day before this incident we decided the training was our most important priority.
We have started to do regular operations drills in one-on-one sessions with all of our on-call engineers.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:gitlabcom-outage-on-2015-05-29.html</guid></item><item><title>Helix DVCS - How to Initialize Like a Pro</title><link>http://ciandcd.github.io/helix-dvcs-how-to-initialize-like-a-pro.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150610/helix-dvcs-initialization-tips-tricks"&gt;http://www.perforce.com/blog/150610/helix-dvcs-initialization-tips-tricks&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/title-tip-tricks9.png"&gt;&lt;/p&gt;
&lt;p&gt;We are all very excited about the new distributed version control system (DVCS)&amp;#160;capabilities of Perforce Helix. Here are a few tips for getting started.&lt;/p&gt;
&lt;p&gt;Keep in mind that in order to use Helix DVCS, you need to have the 2015.1 version of both Helix client P4 and Helix server P4D installed. Some of the commands (e.g., &lt;strong&gt;init&lt;/strong&gt; and &lt;strong&gt;clone&lt;/strong&gt;) are implemented in P4, so you need the latest version of both executables.&lt;/p&gt;
&lt;p&gt;The first thing you need to do when you want to use a local Helix server (called a personal server) is to run &amp;#8220;p4 init&amp;#8221;.&amp;#160; This command will create the personal server for you (in a subdirectory called .p4root) and set up the P4CONFIG and P4IGNORE files, as well.&lt;/p&gt;
&lt;p&gt;&amp;#8220;p4 init&amp;#8221; also turns your current directory into the client workspace root for your new &lt;a&gt;personal server&lt;/a&gt;, which is useful if you already have some files and realize it might be a good thing to version them:&lt;/p&gt;
&lt;pre&gt;    p4 init
    p4 rec
    p4 submit -n "Initial checkin"
&lt;/pre&gt;&lt;p&gt;In the above, &amp;#8220;rec&amp;#8221; is a handy alias for &amp;#8220;reconcile&amp;#8221;&lt;a href="http://www.perforce.com/blog/150506/ten-time-savers-20151"&gt; to save you typing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you start a new project from scratch and want to place it in another directory instead, use the &amp;#8220;-d&amp;#8221; option like such:&lt;/p&gt;
&lt;pre&gt;    p4 &amp;#8211;d path-to-new-project init
&lt;/pre&gt;&lt;h2&gt;Case and Unicode&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s take a closer look at the output of the &amp;#8220;p4 init&amp;#8221; command:&lt;/p&gt;
&lt;pre&gt;    Matching server configuration from &amp;#8216;wayfarer-p4d:1666':
    case-sensitive (-C0), non-unicode (-n)
    Server sknop-dvcs-1429629213 saved.
&lt;/pre&gt;&lt;p&gt;One might ask: what is case-sensitive and Unicode about?&lt;/p&gt;
&lt;p&gt;Because the Helix versioning engine supports many platforms, both case sensitive and insensitive, you can choose how your personal server handles case. By default, the Helix versioning engine adopts the case policy of the platform you run it on: insensitive on Mac and Windows, sensitive on Linux and other Unix platforms.&lt;/p&gt;
&lt;p&gt;Also by default, the Helix versioning engine does no Unicode translation and simply accepts any encoding for file content and metadata. For cross-platform development it is better to put a shared server into Unicode mode.&lt;/p&gt;
&lt;p&gt;For a personal server you may not care at first what these settings are, but what if you want to push your changes to another server at a later stage? The settings of your personal server have to match the settings on the destination server or there could be chaos, as the destination server will refuse the push if the settings do not match.&lt;/p&gt;
&lt;p&gt;It is cumbersome to change case sensitivity and Unicode settings after the Helix versioning engine is populated, so it is important to get this right up front. &amp;#8220;p4 init&amp;#8221; will &amp;#8220;guess&amp;#8221; what the standard settings within your enterprise are by connecting to and inquiring with the Helix versioning engine specified by the P4PORT environment variable (or &amp;#8220;perforce:1666&amp;#8221; if that is not set).&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d rather inquire with a particular server when initializing a personal server, use the &amp;#8220;-p&amp;#8221; option:&lt;/p&gt;
&lt;pre&gt;    p4 init &amp;#8211;p myserver:1666
&lt;/pre&gt;&lt;p&gt;Alternately, you can also explicitly set case and Unicode support with the following options:&lt;/p&gt;
&lt;strong&gt;Option&lt;/strong&gt;
&lt;strong&gt;Meaning&lt;/strong&gt;
&lt;strong&gt;-C1&lt;/strong&gt;
&lt;p&gt;Case insensitive&lt;/p&gt;
&lt;strong&gt;-C0&lt;/strong&gt;
&lt;p&gt;Case sensitive&lt;/p&gt;
&lt;strong&gt;-n&lt;/strong&gt;
&lt;p&gt;No Unicode support&lt;/p&gt;
&lt;strong&gt;-xi&lt;/strong&gt;
&lt;p&gt;Unicode support&lt;/p&gt;
&lt;p&gt;Server and User NameNote well: if you have P4CHARSET defined in your environment and not set to &amp;#8220;none&amp;#8221;, a new personal server will automatically be initialized as a Unicode-enabled server.&lt;/p&gt;
&lt;p&gt;So what is the story with the server and user name?&lt;/p&gt;
&lt;p&gt;The name of your personal server and client workspace coincide. Although in principle you can have more than one workspace against your personal server, in practice there is rarely any need for it. Locally the name does not matter, but when you push your changes into another server, the changes are linked to your local workspace name. An automatically generated name like &amp;#8220;sknop-dvcs-1429629213&amp;#8221; is highly likely do be unique, but you are free to choose a different name if you so wish by using the &amp;#8220;-c&amp;#8221; option.&lt;/p&gt;
&lt;p&gt;The same is true for your user name: locally it does not matter and will typically coincide with either your OS user name and/or whatever P4USER is set to, but when pushing to another server the user name becomes important.&lt;/p&gt;
&lt;p&gt;Take the Perforce workshop for example: my local user name is always &amp;#8220;sknop&amp;#8221;, but for the workshop I use &amp;#8220;sven_erik_knop&amp;#8221;. If I create a local DVCS server under the user name &amp;#8220;sknop&amp;#8221;, submit my changes, set up a remote to the workshop, and push, I&amp;#8217;ll receive only an error message.&lt;/p&gt;
&lt;p&gt;Fortunately, the solution is very simple. I add another user to my local server and update my local protection table:&lt;/p&gt;
&lt;pre&gt;    p4 user &amp;#8211;f sven_erik_knop
    p4 protect
&lt;/pre&gt;&lt;p&gt;Now I can push my changes under the new user name (I might have to log into the target server first):&lt;/p&gt;
&lt;pre&gt;    p4 &amp;#8211;u sven_erik_knop push
&lt;/pre&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A simple &amp;#8220;p4 init&amp;#8221; will create you a new personal server to which you can submit changes, but if you want to push these changes to another server, it makes sense to pay attention to case sensitivity, Unicode support, and workspace and user name.&lt;/p&gt;
&lt;p&gt;Let me know if you are using our new DVCS features and how you are getting on. My Twitter handle is @p4sven.&lt;/p&gt;
&lt;p&gt;For a live technical overview of DVCS features in the Helix Versioning engine sign up for our &lt;a href="http://info.perforce.com/webinar-overview-helix-dvcs.html?utm_source=p4blog&amp;amp;utm_medium=social&amp;amp;utm_campaign=Global_2015Q2_EW_Helix_DVCS"&gt;DevTalk Webinar &lt;/a&gt;on June 26th.&amp;#160;&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:helix-dvcs-how-to-initialize-like-a-pro.html</guid></item><item><title>Helix Swarm 2015.1 Released</title><link>http://ciandcd.github.io/helix-swarm-20151-released.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150608/helix-swarm-20151-released"&gt;http://www.perforce.com/blog/150608/helix-swarm-20151-released&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a http: www.perforce.com collaboration&gt;Swarm&lt;/a&gt; is two years old this month!&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s rewarding to think that just two years ago, our collaboration engine was only just getting into the hands of our customers. Fast-forward to today, where Swarm plays a big part in the daily workflows of so many innovative companies. With much of the functionality now matured, we wanted to expand Swarm beyond just our English-speaking customers.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/swarm-japan-bee.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With the latest release of Helix Swarm, we&amp;#8217;ve translated the product into Japanese. It&amp;#8217;s available through our exclusive partner in Japan, the &lt;a href="http://www.toyo.co.jp"&gt;TOYO Corporation&lt;/a&gt;. TOYO provides expert consulting and support to our Japanese customers, and Swarm joins the &lt;a href="http://www.perforce.com/versioning-engine"&gt;Helix Versioning Engine&lt;/a&gt; and our popular visual client, &lt;a href="http://www.perforce.com/product/components/perforce-visual-client"&gt;P4V&lt;/a&gt;, in the suite of Perforce products available in Japanese.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Localization Support for Swarm &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Swarm team spent the last couple of months creating a localization framework and translating the product and documentation into Japanese. The next languages on our list are Korean and Simplified Chinese. If there&amp;#8217;s a language you&amp;#8217;d like us to add to our list of localizations, please send us your request via the &lt;a href="http://forums.perforce.com/index.php?/forum/29-swarm/"&gt;Perforce Swarm Forums&lt;/a&gt; or by emailing &lt;a href="mailto:support@perforce.com?subject=Request%20for%20Perforce%20Helix%20Swarm"&gt;support&lt;/a&gt; and we&amp;#8217;ll put it on our radar.&lt;/p&gt;
&lt;p&gt;Aside from the &lt;strong&gt;localization support&lt;/strong&gt;, other new functionalities include: &amp;#160; &amp;#160;&amp;#160;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Files and folders are downloadable as ZIP archives&lt;/li&gt;
&lt;li&gt;Swarm now limits the number of files to display in a committed change to a configurable default of 1000&lt;/li&gt;
&lt;li&gt;Configurable timeout sets thresholds for large commits&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;More details can be found in the &lt;a href="http://www.perforce.com/perforce/doc.current/manuals/swarm/whatsnew.html"&gt;What's new in 2015.1&lt;/a&gt; section of our user guide.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:helix-swarm-20151-released.html</guid></item><item><title>How GitLab uses Unicorn and unicorn-worker-killer</title><link>http://ciandcd.github.io/how-gitlab-uses-unicorn-and-unicorn-worker-killer.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/05/how-gitlab-uses-unicorn-and-unicorn-worker-killer/"&gt;https://www.gitlab.com/2015/06/05/how-gitlab-uses-unicorn-and-unicorn-worker-killer/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;How GitLab uses Unicorn and unicorn-worker-killer&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We just wrote some new documentation on how Gitlab uses Unicorn and
unicorn-worker-killer, available on &lt;a href="http://doc.gitlab.com/ce/operations/unicorn.html"&gt;doc.gitlab.com&lt;/a&gt; but
also included below. We would love to hear from the community if you have other
questions so we can improve this documentation resource!&lt;/p&gt;

 


&lt;p&gt;Update 19:29 CEST: made link to doc.gitlab.com more specific.&lt;/p&gt;

&lt;h1&gt;Understanding Unicorn and unicorn-worker-killer&lt;/h1&gt;

&lt;h2&gt;Unicorn&lt;/h2&gt;

&lt;p&gt;GitLab uses &lt;a href="http://unicorn.bogomips.org/"&gt;Unicorn&lt;/a&gt;, a pre-forking Ruby web
server, to handle web requests (web browsers and Git HTTP clients). Unicorn is
a daemon written in Ruby and C that can load and run a Ruby on Rails
application; in our case the Rails application is GitLab Community Edition or
GitLab Enterprise Edition.&lt;/p&gt;

&lt;p&gt;Unicorn has a multi-process architecture to make better use of available CPU
cores (processes can run on different cores) and to have stronger fault
tolerance (most failures stay isolated in only one process and cannot take down
GitLab entirely). On startup, the Unicorn &amp;#8216;master&amp;#8217; process loads a clean Ruby
environment with the GitLab application code, and then spawns &amp;#8216;workers&amp;#8217; which
inherit this clean initial environment. The &amp;#8216;master&amp;#8217; never handles any
requests, that is left to the workers. The operating system network stack
queues incoming requests and distributes them among the workers.&lt;/p&gt;

&lt;p&gt;In a perfect world, the master would spawn its pool of workers once, and then
the workers handle incoming web requests one after another until the end of
time. In reality, worker processes can crash or time out: if the master notices
that a worker takes too long to handle a request it will terminate the worker
process with SIGKILL (&amp;#8216;kill -9&amp;#8217;). No matter how the worker process ended, the
master process will replace it with a new &amp;#8216;clean&amp;#8217; process again. Unicorn is
designed to be able to replace &amp;#8216;crashed&amp;#8217; workers without dropping user
requests.&lt;/p&gt;

&lt;p&gt;This is what a Unicorn worker timeout looks like in &lt;code&gt;unicorn_stderr.log&lt;/code&gt;. The
master process has PID 56227 below.&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.660325 #56227] ERROR -- : worker=10 PID:53009 timeout (61s &amp;gt; 60s), killing
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.699360 #56227] ERROR -- : reaped #&amp;lt;Process::Status: pid 53009 SIGKILL (signal 9)&amp;gt; worker=10
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.708141 #62538]  INFO -- : worker=10 spawned pid=62538
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T10:58:08.708824 #62538]  INFO -- : worker=10 ready&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Tunables&lt;/h3&gt;

&lt;p&gt;The main tunables for Unicorn are the number of worker processes and the
request timeout after which the Unicorn master terminates a worker process.
See the &lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/unicorn.md"&gt;omnibus-gitlab Unicorn settings
documentation&lt;/a&gt;
if you want to adjust these settings.&lt;/p&gt;

&lt;h2&gt;unicorn-worker-killer&lt;/h2&gt;

&lt;p&gt;GitLab has memory leaks. These memory leaks manifest themselves in long-running
processes, such as Unicorn workers. (The Unicorn master process is not known to
leak memory, probably because it does not handle user requests.)&lt;/p&gt;

&lt;p&gt;To make these memory leaks manageable, GitLab comes with the
&lt;a href="https://github.com/kzk/unicorn-worker-killer"&gt;unicorn-worker-killer gem&lt;/a&gt;. This
gem &lt;a href="http://en.wikipedia.org/wiki/Monkey_patch"&gt;monkey-patches&lt;/a&gt; the Unicorn
workers to do a memory self-check after every 16 requests. If the memory of the
Unicorn worker exceeds a pre-set limit then the worker process exits. The
Unicorn master then automatically replaces the worker process.&lt;/p&gt;

&lt;p&gt;This is a robust way to handle memory leaks: Unicorn is designed to handle
workers that &amp;#8216;crash&amp;#8217; so no user requests will be dropped. The
unicorn-worker-killer gem is designed to only terminate a worker process in
between requests, so no user requests are affected.&lt;/p&gt;

&lt;p&gt;This is what a Unicorn worker memory restart looks like in unicorn_stderr.log.
You see that worker 4 (PID 125918) is inspecting itself and decides to exit.
The threshold memory value was 254802235 bytes, about 250MB. With GitLab this
threshold is a random value between 200 and 250 MB.  The master process (PID
117565) then reaps the worker process and spawns a new &amp;#8216;worker 4&amp;#8217; with PID
127549.&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;p class="line-number"&gt;5&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;[2015-06-05T12:07:41.828374 #125918]  WARN -- : #&amp;lt;Unicorn::HttpServer:0x00000002734770&amp;gt;: worker (pid: 125918) exceeds memory limit (256413696 bytes &amp;gt; 254802235 bytes)
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:41.828472 #125918]  WARN -- : Unicorn::WorkerKiller send SIGQUIT (pid: 125918) alive: 23 sec (trial 1)
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:42.025916 #117565]  INFO -- : reaped #&amp;lt;Process::Status: pid 125918 exit 0&amp;gt; worker=4
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:42.034527 #127549]  INFO -- : worker=4 spawned pid=127549
&lt;/p&gt;&lt;p class="line"&gt;[2015-06-05T12:07:42.035217 #127549]  INFO -- : worker=4 ready&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;One other thing that stands out in the log snippet above, taken from
Gitlab.com, is that &amp;#8216;worker 4&amp;#8217; was serving requests for only 23 seconds. This
is a normal value for our current GitLab.com setup and traffic.&lt;/p&gt;

&lt;p&gt;The high frequency of Unicorn memory restarts on some GitLab sites can be a
source of confusion for administrators. Usually they are a &lt;a href="http://en.wikipedia.org/wiki/Red_herring"&gt;red
herring&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:how-gitlab-uses-unicorn-and-unicorn-worker-killer.html</guid></item><item><title>How to Archive a Review in Helix Swarm</title><link>http://ciandcd.github.io/how-to-archive-a-review-in-helix-swarm.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150624/how-archive-review-helix-swarm"&gt;http://www.perforce.com/blog/150624/how-archive-review-helix-swarm&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/title-tip-tricks9.png"&gt;&lt;/p&gt;
&lt;p&gt;We get a lot of positive feedback about Helix Swarm, but some customers are not sure about all of the workflow steps, so here's a quick review.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;The code review in Helix Swarm can be in one of the following states:&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Needs Review -&amp;#160;&lt;/strong&gt;The review has started and the changes need to be reviewed.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Needs Revisions -&amp;#160;&lt;/strong&gt;The changes have been reviewed and the reviewer has indicated that further revisions are required.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Approved -&amp;#160;&lt;/strong&gt;The review has completed. The changes need to be committed.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Rejected -&amp;#160;&lt;/strong&gt;The review has completed. The changes are undesirable and should not be committed.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Archived -&lt;/strong&gt;The review has completed for now. However, it is neither rejected nor approved; it is simply put aside in case it is needed in the future.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Most of these states are self-explanatory with the exception of "Archived" state, which is where my fellow customers feel a bit lost.&lt;/p&gt;
&lt;p&gt;They wonder how they can archive and restore reviews for future consideration. Which can also mean that they inadvertently created a review for something they didn't intend to. That said, the review in question can be archived, restored, updated with new set of files and then routed through the workflow.&lt;/p&gt;
&lt;h4&gt;Let's look at how to "Archive" the review:&lt;/h4&gt;
&lt;p&gt;When you open a review in Swarm, there is a drop-down at the top right corner of the review.&amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/Needs-review-archive.png"&gt;&lt;/p&gt;
&lt;p&gt;Select the "Archive" option if you think the review needs to be deffered for future consideration.&lt;/p&gt;
&lt;p&gt;Once you set the state of the review to "Archive", the review disappears from the list of open reviews.&lt;/p&gt;
&lt;p&gt;Now, at a later stage, the project team decides that the review should be restored for immediate consideration.&lt;/p&gt;
&lt;h4&gt;Let's look at how to restore a previously archived review:&lt;/h4&gt;
&lt;p&gt;The previously archived review can be found under, "Closed" review tab. To narrow down your search further, the "Archived" review icon &lt;img alt="" src="/sites/default/files/ArchiveIcon.png"&gt;&amp;#160;can be clicked to list only archived reviews.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/archived-reviews-search.png"&gt;&lt;/p&gt;
&lt;p&gt;Select the review you wish to schedule for consideration by clicking on the hyperlinked review ID.&amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/hyperlinked-review.png"&gt;&lt;/p&gt;
&lt;p&gt;Again, go to the drop-down at the top right corner of the review. Simply click "Needs Review" and the review will reappear in the list of Opened reviews.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/arhived-needs-review.png"&gt;&lt;/p&gt;
&lt;p&gt;Are you using Helix Swarm? We invite you to try it for free&amp;#8211;it is included in Perforce Helix's free 20&amp;#8211;user edition. &lt;a href="http://info.perforce.com/free.html"&gt;Download now&lt;/a&gt; and tell us what you think!&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:how-to-archive-a-review-in-helix-swarm.html</guid></item><item><title>How to undo (almost) anything with Git · GitHub</title><link>http://ciandcd.github.io/how-to-undo-almost-anything-with-git-github.html</link><description>From:&lt;a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git"&gt;https://github.com/blog/2019-how-to-undo-almost-anything-with-git&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;One of the most useful features of any version control system is the ability to "undo" your mistakes. In Git, "undo" can mean many slightly different things.&lt;/p&gt;

&lt;p&gt;When you make a new commit, Git stores a snapshot of your repository at that specific moment in time; later, you can use Git to go back to an earlier version of your project.&lt;/p&gt;

&lt;p&gt;In this post, I'm going to take a look at some common scenarios where you might want to "undo" a change you've made and the best way to do it using Git.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="undo-a-public-change" class="anchor" href="#undo-a-public-change"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Undo a "public" change&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You just ran &lt;code&gt;git push&lt;/code&gt;, sending your changes to GitHub, now you realize there's a problem with one of those commits. You'd like to undo that commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git revert &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git revert&lt;/code&gt; will create a new commit that's the opposite (or inverse) of the given SHA. If the old commit is "matter", the new commit is "anti-matter"&amp;#8212;anything removed in the old commit will be added in the new commit and anything added in the old commit will be removed in the new commit. &lt;/p&gt;

&lt;p&gt;This is Git's safest, most basic "undo" scenario, because it doesn't alter history&amp;#8212;so you can now &lt;code&gt;git push&lt;/code&gt; the new "inverse" commit to undo your mistaken commit.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="fix-the-last-commit-message" class="anchor" href="#fix-the-last-commit-message"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Fix the last commit message&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You just typo'd the last commit message, you did &lt;code&gt;git commit -m "Fxies bug #42"&lt;/code&gt; but before &lt;code&gt;git push&lt;/code&gt; you realized that really should say "Fixes bug #42".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; or &lt;code&gt;git commit --amend -m "Fixes bug #42"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; will update and replace the most recent commit with a new commit that combines any staged changes with the contents of the previous commit. With nothing currently staged, this just rewrites the previous commit message.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="undo-local-changes" class="anchor" href="#undo-local-changes"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Undo "local" changes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; The cat walked across the keyboard and somehow saved the changes, then crashed the editor. You haven't committed those changes, though. You want to undo everything in that file&amp;#8212;just go back to the way it looked in the last commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git checkout -- &amp;lt;bad filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git checkout&lt;/code&gt; alters files in the working directory to a state previously known to Git. You could provide a branch name or specific SHA you want to go back to or, by default, Git will assume you want to checkout &lt;code&gt;HEAD&lt;/code&gt;, the last commit on the currently-checked-out branch.&lt;/p&gt;

&lt;p&gt;Keep in mind: any changes you "undo" this way are really gone. They were never committed, so Git can't help us recover them later. Be sure you know what you're throwing away here! (Maybe use &lt;code&gt;git diff&lt;/code&gt; to confirm.)&lt;/p&gt;

&lt;h2&gt;
&lt;a id="reset-local-changes" class="anchor" href="#reset-local-changes"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Reset "local" changes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You've made some commits locally (not yet pushed), but everything is terrible, you want to undo the last three commits&amp;#8212;like they never happened.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git reset &amp;lt;last good SHA&amp;gt;&lt;/code&gt; or &lt;code&gt;git reset --hard &amp;lt;last good SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git reset&lt;/code&gt; rewinds your repository's history all the way back to the specified SHA. It's as if those commits never happened. By default, &lt;code&gt;git reset&lt;/code&gt; preserves the working directory. The commits are gone, but the contents are still on disk. This is the safest option, but often, you'll want to "undo" the commits and the changes in one move&amp;#8212;that's what &lt;code&gt;--hard&lt;/code&gt; does.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="redo-after-undo-local" class="anchor" href="#redo-after-undo-local"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Redo after undo "local"&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You made some commits, did a &lt;code&gt;git reset --hard&lt;/code&gt; to "undo" those changes (see above), and then realized: you want those changes back!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git reflog&lt;/code&gt; and &lt;code&gt;git reset&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git reflog&lt;/code&gt; is an amazing resource for recovering project history. You can recover almost anything&amp;#8212;anything you've committed&amp;#8212;via the reflog.&lt;/p&gt;

&lt;p&gt;You're probably familiar with the &lt;code&gt;git log&lt;/code&gt; command, which shows a list of commits. &lt;code&gt;git reflog&lt;/code&gt; is similar, but instead shows a list of times when &lt;code&gt;HEAD&lt;/code&gt; changed.&lt;/p&gt;

&lt;p&gt;Some caveats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;HEAD&lt;/code&gt; changes only.&lt;code&gt;HEAD&lt;/code&gt; changes when you switch branches, make commits with &lt;code&gt;git commit&lt;/code&gt; and un-make commits with &lt;code&gt;git reset&lt;/code&gt;, but &lt;code&gt;HEAD&lt;/code&gt; does not change when you &lt;code&gt;git checkout -- &amp;lt;bad filename&amp;gt;&lt;/code&gt; (from an earlier scenario&amp;#8212;as mentioned before, those changes were never committed, so the reflog can't help us recover those.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git reflog&lt;/code&gt; doesn't last forever. Git will periodically clean up objects which are "unreachable." Don't expect to find months-old commits lying around in the reflog forever.&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;reflog&lt;/code&gt; is yours and yours alone. You can't use &lt;code&gt;git reflog&lt;/code&gt; to restore another developer's un-pushed commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png" alt="reflog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So... how do you use the reflog to "redo" a previously "undone" commit or commits? It depends on what exactly you want to accomplish:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to restore the project's history as it was at that moment in time use &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If you want to recreate one or more files in your working directory as they were at that moment in time, without altering history use &lt;code&gt;git checkout &amp;lt;SHA&amp;gt; -- &amp;lt;filename&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If you want to replay exactly one of those commits into your repository use &lt;code&gt;git cherry-pick &amp;lt;SHA&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;a id="once-more-with-branching" class="anchor" href="#once-more-with-branching"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Once more, with branching&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You made some commits, then realized you were checked out on &lt;code&gt;master&lt;/code&gt;. You wish you could make those commits on a feature branch instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git branch feature&lt;/code&gt;, &lt;code&gt;git reset --hard origin/master&lt;/code&gt;, and &lt;code&gt;git checkout feature&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; You may be used to creating new branches with &lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;&amp;#8212;it's a popular short-cut for creating a new branch and checking it out right away&amp;#8212;but you don't want to switch branches just yet. Here, &lt;code&gt;git branch feature&lt;/code&gt; creates a new branch called &lt;code&gt;feature&lt;/code&gt; pointing at your most recent commit, but leaves you checked out to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;git reset --hard&lt;/code&gt; rewinds &lt;code&gt;master&lt;/code&gt; back to &lt;code&gt;origin/master&lt;/code&gt;, before any of your new commits. Don't worry, though, they are still available on &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;git checkout&lt;/code&gt; switches to the new &lt;code&gt;feature&lt;/code&gt; branch, with all of your recent work intact.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="branch-in-time-saves-nine" class="anchor" href="#branch-in-time-saves-nine"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Branch in time saves nine&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You started a new branch &lt;code&gt;feature&lt;/code&gt; based on &lt;code&gt;master&lt;/code&gt;, but &lt;code&gt;master&lt;/code&gt; was pretty far behind &lt;code&gt;origin/master&lt;/code&gt;. Now that &lt;code&gt;master&lt;/code&gt; branch is in sync with &lt;code&gt;origin/master&lt;/code&gt;, you wish commits on &lt;code&gt;feature&lt;/code&gt; were starting now, instead of being so far behind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git checkout feature&lt;/code&gt; and &lt;code&gt;git rebase master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; You could have done this with &lt;code&gt;git reset&lt;/code&gt; (no &lt;code&gt;--hard&lt;/code&gt;, intentionally preserving changes on disk) then &lt;code&gt;git checkout -b &amp;lt;new branch name&amp;gt;&lt;/code&gt; and then re-commit the changes, but that way, you'd lose the commit history. There's a better way.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rebase master&lt;/code&gt; does a couple of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First it locates the common ancestor between your currently-checked-out branch and &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then it resets the currently-checked-out branch to that ancestor, holding all later commits in a temporary holding area.&lt;/li&gt;
&lt;li&gt;Then it advances the currently-checked-out-branch to the end of &lt;code&gt;master&lt;/code&gt; and replays the commits from the holding area after &lt;code&gt;master&lt;/code&gt;'s last commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;a id="mass-undoredo" class="anchor" href="#mass-undoredo"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Mass undo/redo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You started this feature in one direction, but mid-way through, you realized another solution was better. You've got a dozen or so commits, but you only want some of them. You'd like the others to just disappear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git rebase -i &amp;lt;earlier SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;-i&lt;/code&gt; puts &lt;code&gt;rebase&lt;/code&gt; in "interactive mode". It starts off like the rebase discussed above, but before replaying any commits, it pauses and allows you to gently modify each commit as it's replayed. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;rebase -i&lt;/code&gt; will open in your default text editor, with a list of commits being applied, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953863/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953863/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png" alt="rebase-interactive1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first two columns are key: the first is the selected command for the commit identified by the SHA in the second column. By default, &lt;code&gt;rebase -i&lt;/code&gt; assumes each commit is being applied, via the &lt;code&gt;pick&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To drop a commit, just delete that line in your editor. If you no longer want the bad commits in your project, you can delete lines 1 and 3-4 above. &lt;/p&gt;

&lt;p&gt;If you want to preserve the contents of the commit but edit the commit message, you use the &lt;code&gt;reword&lt;/code&gt; command. Just replace the word &lt;code&gt;pick&lt;/code&gt; in the first column with the word &lt;code&gt;reword&lt;/code&gt; (or just &lt;code&gt;r&lt;/code&gt;). It can be tempting to rewrite the commit message right now, but that won't work&amp;#8212;&lt;code&gt;rebase -i&lt;/code&gt; ignores everything after the SHA column. The text after that is really just to help us remember what &lt;code&gt;0835fe2&lt;/code&gt; is all about. When you've finished with &lt;code&gt;rebase -i&lt;/code&gt;, you'll be prompted for any new commit messages you need to write.&lt;/p&gt;

&lt;p&gt;If you want to combine two commits together, you can use the &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;fixup&lt;/code&gt; commands, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953865/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953865/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png" alt="rebase-interactive2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;squash&lt;/code&gt; and &lt;code&gt;fixup&lt;/code&gt; combine "up"&amp;#8212;the commit with the "combine" command will be merged into the commit immediately before it. In this scenario, &lt;code&gt;0835fe2&lt;/code&gt; and &lt;code&gt;6943e85&lt;/code&gt; will be combined into one commit, then &lt;code&gt;38f5e4e&lt;/code&gt; and &lt;code&gt;af67f82&lt;/code&gt; will be combined together into another. &lt;/p&gt;

&lt;p&gt;When you select &lt;code&gt;squash&lt;/code&gt;, Git will prompt us to give the new, combined commit a new commit message; &lt;code&gt;fixup&lt;/code&gt; will give the new commit the message from the first commit in the list. Here, you know that &lt;code&gt;af67f82&lt;/code&gt; is an "ooops" commit, so you'll just use the commit message from &lt;code&gt;38f5e4e&lt;/code&gt; as is, but you'll write a new message for the new commit you get from combining &lt;code&gt;0835fe2&lt;/code&gt; and &lt;code&gt;6943e85&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you save and exit your editor, Git will apply your commits in order from top to bottom. You can alter the order commits apply by changing the order of commits before saving. If you'd wanted, you could have combined &lt;code&gt;af67f82&lt;/code&gt; with &lt;code&gt;0835fe2&lt;/code&gt; by arranging things like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953864/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953864/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png" alt="rebase-interactive3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;a id="fix-an-earlier-commit" class="anchor" href="#fix-an-earlier-commit"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Fix an earlier commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You failed to include a file in an earlier commit, it'd be great if that earlier commit could somehow include the stuff you left out. You haven't pushed, yet, but it wasn't the most recent commit, so you can't use &lt;code&gt;commit --amend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git commit --squash &amp;lt;SHA of the earlier commit&amp;gt;&lt;/code&gt; and &lt;code&gt;git rebase --autosquash -i &amp;lt;even earlier SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; &lt;code&gt;git commit --squash&lt;/code&gt; will create a new commit with a commit message like &lt;code&gt;squash! Earlier commit&lt;/code&gt;. (You could manually create a commit with a message like that, but &lt;code&gt;commit --squash&lt;/code&gt; saves you some typing.)&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;git commit --fixup&lt;/code&gt; if you don't want to be prompted to write a new commit message for the combined commit. In this scenario, you'd probably use &lt;code&gt;commit --fixup&lt;/code&gt;, since you just want to use the earlier commit's commit message during &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rebase --autosquash -i&lt;/code&gt; will launch an interactive &lt;code&gt;rebase&lt;/code&gt; editor, but the editor will open with any &lt;code&gt;squash!&lt;/code&gt; and &lt;code&gt;fixup!&lt;/code&gt; commits already paired to the commit target in the list of commits, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2077/6953862/f6a7a1d8-d891-11e4-8784-c32262ff54da.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2077/6953862/f6a7a1d8-d891-11e4-8784-c32262ff54da.png" alt="rebase-autosquash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;--squash&lt;/code&gt; and &lt;code&gt;--fixup&lt;/code&gt;, you might not remember the SHA of the commit you want to fix&amp;#8212;only that it was one or five commits ago. You might find using Git's &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; operators especially handy. &lt;code&gt;HEAD^&lt;/code&gt; is one commit before &lt;code&gt;HEAD&lt;/code&gt;. &lt;code&gt;HEAD~4&lt;/code&gt; is four commits before &lt;code&gt;HEAD&lt;/code&gt; - or, altogether, five commits back. &lt;/p&gt;

&lt;h2&gt;
&lt;a id="stop-tracking-a-tracked-file" class="anchor" href="#stop-tracking-a-tracked-file"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Stop tracking a tracked file&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You accidentally added &lt;code&gt;application.log&lt;/code&gt; to the repository, now every time you run the application, Git reports there are unstaged changes in &lt;code&gt;application.log&lt;/code&gt;. You put &lt;code&gt;*.log&lt;/code&gt; in the &lt;code&gt;.gitignore&lt;/code&gt; file, but it's still there&amp;#8212;how do you tell git to to "undo" tracking changes in this file?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git rm --cached application.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's happening:&lt;/strong&gt; While &lt;code&gt;.gitignore&lt;/code&gt; prevents Git from tracking changes to files or even noticing the existence of files it's never tracked before, once a file has been added and committed, Git will continue noticing changes in that file. Similarly, if you've used &lt;code&gt;git add -f&lt;/code&gt; to "force", or override, &lt;code&gt;.gitignore&lt;/code&gt;, Git will keep tracking changes. You won't have to use &lt;code&gt;-f&lt;/code&gt; to add it in the future.&lt;/p&gt;

&lt;p&gt;If you want to remove that should-be-ignored file from Git's tracking, &lt;code&gt;git rm --cached&lt;/code&gt; will remove it from tracking but leave the file untouched on disk. Since it's now being ignored, you won't see that file in &lt;code&gt;git status&lt;/code&gt; or accidentally commit changes from that file again.&lt;/p&gt;



&lt;p&gt;That's how to undo anything with Git. To learn more about any of the Git commands used here, check out the relevant documentation:&lt;/p&gt;

 
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:how-to-undo-almost-anything-with-git-github.html</guid></item><item><title>Implementing .gitlab-ci.yml</title><link>http://ciandcd.github.io/implementing-gitlab-ciyml.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/08/implementing-gitlab-ci-dot-yml/"&gt;https://www.gitlab.com/2015/06/08/implementing-gitlab-ci-dot-yml/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Implementing .gitlab-ci.yml&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;We &lt;a href="https://about.gitlab.com/2015/05/06/why-were-replacing-gitlab-ci-jobs-with-gitlab-ci-dot-yml/"&gt;wrote&lt;/a&gt; about why we&amp;#8217;re replacing GitLab CI jobs with a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file.
As we&amp;#8217;ve started on implementing this large change, we wanted to share the details
of that process with you and would love to hear what you think.&lt;/p&gt;

 


&lt;p&gt;To recap the &lt;a href="https://about.gitlab.com/2015/05/06/why-were-replacing-gitlab-ci-jobs-with-gitlab-ci-dot-yml/"&gt;previous article&lt;/a&gt;:
currently you are required to write out your CI jobs in GitLab CI&amp;#8217;s interface.
We&amp;#8217;re replacing this with a single file &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;, that you place in the root
of your repository.&lt;/p&gt;

&lt;h2&gt;Schema change&lt;/h2&gt;

&lt;p&gt;Currently, on a push to GitLab, GitLab sends a web-hook to the CI Coordinator.
The coordinator creates a build based on the jobs that are defined in its UI,
which can then be executed by the connected Runners.&lt;/p&gt;

&lt;p&gt;In the new schema, GitLab sends the web-hook and the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; contents
to the CI Coordinator, which creates builds based on the yml file. In turn,
these builds are executed by the Runners as before.&lt;/p&gt;

&lt;h2&gt;Migrating to new style&lt;/h2&gt;

&lt;p&gt;Keeping two different ways of doing things would be a strain on development and
support, not to mention confusing. So we&amp;#8217;re not just deprecating the old style
of defining jobs, we&amp;#8217;re removing it entirely and will migrate existing jobs.&lt;/p&gt;

&lt;p&gt;Upon upgrading your existing jobs defined in the GitLab CI Coordinator will be
converted into a YAML file with the new syntax. You can download this file at any
time from the project settings.&lt;/p&gt;

&lt;p&gt;When the GitLab webhook triggers and doesn&amp;#8217;t transmit the content from &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;,
the coordinator will use the converted YAML file instead.&lt;/p&gt;

&lt;p&gt;This makes migrating to the new style very easy. You can start by simply copy-pasting
the contents of the converted YAML file to the root of your repository. Existing projects
will continue to build successfully, yet new projects do not have the option to
use anything else.&lt;/p&gt;

&lt;h2&gt;An example &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To get an idea of how the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; will look, we&amp;#8217;ve prepared an example
for a Ruby on Rails project (such as GitLab itself). Of course, this is due to
change as we&amp;#8217;re still working on this.&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;p class="line-number"&gt;5&lt;/p&gt;
&lt;p class="line-number"&gt;6&lt;/p&gt;
&lt;p class="line-number"&gt;7&lt;/p&gt;
&lt;p class="line-number"&gt;8&lt;/p&gt;
&lt;p class="line-number"&gt;9&lt;/p&gt;
&lt;p class="line-number"&gt;10&lt;/p&gt;
&lt;p class="line-number"&gt;11&lt;/p&gt;
&lt;p class="line-number"&gt;12&lt;/p&gt;
&lt;p class="line-number"&gt;13&lt;/p&gt;
&lt;p class="line-number"&gt;14&lt;/p&gt;
&lt;p class="line-number"&gt;15&lt;/p&gt;
&lt;p class="line-number"&gt;16&lt;/p&gt;
&lt;p class="line-number"&gt;17&lt;/p&gt;
&lt;p class="line-number"&gt;18&lt;/p&gt;
&lt;p class="line-number"&gt;19&lt;/p&gt;
&lt;p class="line-number"&gt;20&lt;/p&gt;
&lt;p class="line-number"&gt;21&lt;/p&gt;
&lt;p class="line-number"&gt;22&lt;/p&gt;
&lt;p class="line-number"&gt;23&lt;/p&gt;
&lt;p class="line-number"&gt;24&lt;/p&gt;
&lt;p class="line-number"&gt;25&lt;/p&gt;
&lt;p class="line-number"&gt;26&lt;/p&gt;
&lt;p class="line-number"&gt;27&lt;/p&gt;
&lt;p class="line-number"&gt;28&lt;/p&gt;
&lt;p class="line-number"&gt;29&lt;/p&gt;
&lt;p class="line-number"&gt;30&lt;/p&gt;
&lt;p class="line-number"&gt;31&lt;/p&gt;
&lt;p class="line-number"&gt;32&lt;/p&gt;
&lt;p class="line-number"&gt;33&lt;/p&gt;
&lt;p class="line-number"&gt;34&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;# Refs to skip
&lt;/p&gt;&lt;p class="line"&gt;skip_refs: &amp;#8220;deploy*&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Run before each script
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Refs to skip
&lt;/p&gt;&lt;p class="line"&gt;skip_refs: &amp;#8220;deploy*&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Run before each script
&lt;/p&gt;&lt;p class="line"&gt;before_script:
&lt;/p&gt;&lt;p class="line"&gt;  - export PATH=$HOME/bin:/usr/local/bin:/usr/bin:/bin
&lt;/p&gt;&lt;p class="line"&gt;  - gem install bundler
&lt;/p&gt;&lt;p class="line"&gt;  - cp config/database.yml.mysql config/database.yml
&lt;/p&gt;&lt;p class="line"&gt;  - cp config/gitlab.yml.example config/gitlab.yml
&lt;/p&gt;&lt;p class="line"&gt;  - touch log/application.log
&lt;/p&gt;&lt;p class="line"&gt;  - touch log/test.log
&lt;/p&gt;&lt;p class="line"&gt;  - bundle install --without postgres production --jobs $(nproc)
&lt;/p&gt;&lt;p class="line"&gt;  - &amp;#8220;bundle exec rake db:create RAILS_ENV=test&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Parallel jobs, each line is a parallel build
&lt;/p&gt;&lt;p class="line"&gt;jobs:
&lt;/p&gt;&lt;p class="line"&gt;  - script: &amp;#8220;rake spec&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    runner: &amp;#8220;ruby,postgres&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    name: &amp;#8220;Rspec&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;  - script: &amp;#8220;rake spinach&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    runner: &amp;#8220;ruby,mysql&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    name: &amp;#8220;Spinach&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;    tags: true
&lt;/p&gt;&lt;p class="line"&gt;    branches: false
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;# Parallel deploy jobs
&lt;/p&gt;&lt;p class="line"&gt;on_success:
&lt;/p&gt;&lt;p class="line"&gt;  - &amp;#8220;cap deploy production&amp;#8221;
&lt;/p&gt;&lt;p class="line"&gt;  - &amp;#8220;cap deploy staging&amp;#8221;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;UPDATE&lt;/h2&gt;

&lt;p&gt;Dmitriy and Sytse spend some time thinking about file syntax.
Scripting should be simple and memorable. Thats why we come with better proposal:&lt;/p&gt;

&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;p class="line-number"&gt;2&lt;/p&gt;
&lt;p class="line-number"&gt;3&lt;/p&gt;
&lt;p class="line-number"&gt;4&lt;/p&gt;
&lt;p class="line-number"&gt;5&lt;/p&gt;
&lt;p class="line-number"&gt;6&lt;/p&gt;
&lt;p class="line-number"&gt;7&lt;/p&gt;
&lt;p class="line-number"&gt;8&lt;/p&gt;
&lt;p class="line-number"&gt;9&lt;/p&gt;
&lt;p class="line-number"&gt;10&lt;/p&gt;
&lt;p class="line-number"&gt;11&lt;/p&gt;
&lt;p class="line-number"&gt;12&lt;/p&gt;
&lt;p class="line-number"&gt;13&lt;/p&gt;
&lt;p class="line-number"&gt;14&lt;/p&gt;
&lt;p class="line-number"&gt;15&lt;/p&gt;
&lt;p class="line-number"&gt;16&lt;/p&gt;
&lt;p class="line-number"&gt;17&lt;/p&gt;
&lt;p class="line-number"&gt;18&lt;/p&gt;
&lt;p class="line-number"&gt;19&lt;/p&gt;
&lt;p class="line-number"&gt;20&lt;/p&gt;
&lt;p class="line-number"&gt;21&lt;/p&gt;
&lt;p class="line-number"&gt;22&lt;/p&gt;
&lt;p class="line-number"&gt;23&lt;/p&gt;
&lt;p class="line-number"&gt;24&lt;/p&gt;
&lt;p class="line-number"&gt;25&lt;/p&gt;
&lt;p class="line-number"&gt;26&lt;/p&gt;
&lt;p class="line-number"&gt;27&lt;/p&gt;
&lt;p class="line-number"&gt;28&lt;/p&gt;
&lt;p class="line-number"&gt;29&lt;/p&gt;
&lt;p class="line-number"&gt;30&lt;/p&gt;
&lt;p class="line-number"&gt;31&lt;/p&gt;
&lt;p class="line-number"&gt;32&lt;/p&gt;
&lt;p class="line-number"&gt;33&lt;/p&gt;
&lt;p class="line-number"&gt;34&lt;/p&gt;
&lt;p class="line-number"&gt;35&lt;/p&gt;
&lt;p class="line-number"&gt;36&lt;/p&gt;
&lt;p class="line-number"&gt;37&lt;/p&gt;
&lt;p class="line-number"&gt;38&lt;/p&gt;
&lt;p class="line-number"&gt;39&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class=""&gt;&lt;p class="line"&gt;before_script:
&lt;/p&gt;&lt;p class="line"&gt;  - gem install bundler
&lt;/p&gt;&lt;p class="line"&gt;  - bundle install
&lt;/p&gt;&lt;p class="line"&gt;  - bundle exec rake db:create
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;rspec:
&lt;/p&gt;&lt;p class="line"&gt;  test: "rake spec"
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - ruby
&lt;/p&gt;&lt;p class="line"&gt;    - postgres
&lt;/p&gt;&lt;p class="line"&gt;  only:
&lt;/p&gt;&lt;p class="line"&gt;    - branches
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;spinach:
&lt;/p&gt;&lt;p class="line"&gt;  test: "rake spinach"
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - ruby
&lt;/p&gt;&lt;p class="line"&gt;    - mysql
&lt;/p&gt;&lt;p class="line"&gt;  except:
&lt;/p&gt;&lt;p class="line"&gt;    - tags
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;staging:
&lt;/p&gt;&lt;p class="line"&gt;  deploy: "cap deploy stating"
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - capistrano
&lt;/p&gt;&lt;p class="line"&gt;    - debian
&lt;/p&gt;&lt;p class="line"&gt;  except:
&lt;/p&gt;&lt;p class="line"&gt;    - stable
&lt;/p&gt;&lt;p class="line"&gt;
&lt;/p&gt;&lt;p class="line"&gt;production:
&lt;/p&gt;&lt;p class="line"&gt;  deploy:
&lt;/p&gt;&lt;p class="line"&gt;    - cap deploy production
&lt;/p&gt;&lt;p class="line"&gt;    - cap notify
&lt;/p&gt;&lt;p class="line"&gt;  tags:
&lt;/p&gt;&lt;p class="line"&gt;    - capistrano
&lt;/p&gt;&lt;p class="line"&gt;    - debian
&lt;/p&gt;&lt;p class="line"&gt;  only:
&lt;/p&gt;&lt;p class="line"&gt;    - master
&lt;/p&gt;&lt;p class="line"&gt;    - /^deploy-.*$/&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;h2&gt;Contribute&lt;/h2&gt;

&lt;p&gt;GitLab is nothing without its community.
Contribute or follow the development in the &lt;a href="https://gitlab.com/gitlab-org/gitlab-ci/commit/c2c9236cde807e98ff9571f8d23ac4def75eb9ba"&gt;GitLab CI repository&lt;/a&gt;.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:implementing-gitlab-ciyml.html</guid></item><item><title>Improved organization permissions · GitHub</title><link>http://ciandcd.github.io/improved-organization-permissions-github.html</link><description>From:&lt;a href="https://github.com/blog/2020-improved-organization-permissions"&gt;https://github.com/blog/2020-improved-organization-permissions&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Organizations have always been the best way for teams to work together and collaborate on code. We're happy to announce &lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;major improvements to GitHub organization permissions&lt;/a&gt;. These improvements include new customizable member privileges, fine-grained team permissions, and more open communication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/874145/8073289/cc2561da-0ed7-11e5-8bed-36f15367c914.png" alt="improved-organization-permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The improved permissions system gives your organization the flexibility to work the way you want. Here are just a few highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(Opt-in) Members can view and mention all teams, even when they're not on those teams.&lt;/li&gt;
&lt;li&gt;(Opt-in) Members can create repositories without help from an owner.&lt;/li&gt;
&lt;li&gt;Members can create new teams to self-organize with the people they work with.&lt;/li&gt;
&lt;li&gt;Owners can give just the right amount of access to contractors and interns by adding them to repositories without giving them the privileges of organization members.&lt;/li&gt;
&lt;li&gt;And many more! &lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;Learn about GitHub's improved organization permissions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these new features give your organization the ability to work together seamlessly without everyone needing to be an owner.&lt;/p&gt;

&lt;p&gt;Once these features launch, organization owners will be able to turn on new permissions as needed. Simply opt-in when you're ready.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="early-access" class="anchor" href="#early-access"&gt;&lt;p class="octicon octicon-link"&gt;&lt;/p&gt;&lt;/a&gt;Early access&lt;/h2&gt;

&lt;p&gt;We're rolling out our improved permissions system to a select group of users who will be asked to provide feedback over a short survey as part of the program. If you're interested in being one of the first to try it out on GitHub.com, &lt;a href="https://github.com/orgs/improved-permissions?utm_source=github_site&amp;amp;utm_medium=blog&amp;amp;utm_campaign=organization-permissions"&gt;sign your organization up for early access&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next few months, every organization on GitHub.com will have the improved permissions system.&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:improved-organization-permissions-github.html</guid></item><item><title>Living la Vida Helix: Submitting Without Fear</title><link>http://ciandcd.github.io/living-la-vida-helix-submitting-without-fear.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150609/living-la-vida-helix-submitting-without-fear"&gt;http://www.perforce.com/blog/150609/living-la-vida-helix-submitting-without-fear&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;One of the common complaints I hear about centralized version control systems is that they are scary. With every commit being immediately visible there is a feeling that you may screw up everything for your co-workers. What&amp;#8217;s worse is that you generally don&amp;#8217;t have the power to clean up after yourself. How many of us have had to sheepishly go ask the admin to obliterate something?&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/viva-la-helix-fear-blog.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With P4D (which we now call Helix Versioning Engine) becoming a proper DVCS, you now can manipulate history that has not yet been shared with other people. Than means you can commit to your heart&amp;#8217;s content, and then sweep through later to keep just the interesting commits. It also means that if you accidentally submit something you can deal with it.&lt;/p&gt;
&lt;p&gt;Just recently while doing some cleanup work in the Workshop I had just one of these cases. I&amp;#8217;d like to walk you through what happened so that you can see how unsubmit and resubmit will help you.&lt;/p&gt;
&lt;h4&gt;Setting the scene&lt;/h4&gt;
&lt;p&gt;A user had reported that a number of files that I had added the day before had all of their line endings mangled. The files were already in the shared server, so I didn&amp;#8217;t want to run p4 unsubmit there, and anyway I feel it is important for my failures to remain on display for all to see.&lt;/p&gt;
&lt;p&gt;So I got to work updating the files.&lt;/p&gt;
&lt;pre&gt; p4 fetch&lt;/pre&gt;
&lt;p&gt;Everyting was up-to-date. Next to find the files with the bad line endings.&lt;/p&gt;
&lt;pre&gt;grep -lIUr --color &lt;p&gt;"^R"&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;I was lucky and it was just a handful of files. Thankfully turning Windows line endings into Unixones is a piece of cake with P4D.&lt;/p&gt;
&lt;pre&gt;p4 client -o | sed s/LineEnd: local/LineEnd: share | p4 client -i&lt;/pre&gt;
&lt;p&gt;Now to get the files synced with the correct line endings and submitted:&lt;/p&gt;
&lt;pre&gt;p4 sync -f &lt;/pre&gt;
&lt;pre&gt;p4 submit -d &lt;p&gt;"Fixing up some busted line endings that snuck in"&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;All was well and good until I realized that in my excitement I&amp;#8217;d mangled some solution files which probably wanted those '\R&amp;#8217;s. Thankfully I hadn&amp;#8217;t pushed, so I could quickly clean up my mess.&lt;/p&gt;
&lt;pre&gt;p4 changes -m1&lt;/pre&gt;
&lt;pre&gt;p4 unsubmit @&lt;p&gt;12345&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;I identified my last change number, and then unsubmitted it. At this point I had all of my changed files in a shelf. In this case I had only one changelist, but I still decided to use p4 resubmit to apply the change. p4 resubmit makes it easy to reapply the changes in order.&lt;/p&gt;
&lt;pre&gt;p4 resubmit&lt;/pre&gt;
&lt;p&gt;This kicks me into interactive mode. Because there is a lot you can do with resubmit and I always forget the options, I hit '?' to see the list.&lt;/p&gt;
&lt;pre&gt;Specify next action ( l/m/e/c/r/R/s/d/b/v/V/a/q ) or ? &lt;p class="s1"&gt;for &lt;/p&gt;help: ?
The following actions are available:
c Modify the change description &lt;p class="s1"&gt;for &lt;/p&gt;this change
m Merge this change, &lt;p class="s1"&gt;then &lt;/p&gt;submit &lt;p class="s1"&gt;if &lt;/p&gt;no conflicts
e Merge this change, &lt;p class="s1"&gt;then exit for &lt;/p&gt;further editing
r Interactively resolve this change, &lt;p class="s1"&gt;then&lt;/p&gt;
submit &lt;p class="s1"&gt;if &lt;/p&gt;no conflicts
a Add (squash) this change into the next unsubmitted
change
s Skip this change and move on to the next
d Delete this change without submitting it
b Begin again from the earliest remaining change
l List the changes remaining to be processed
v View the current change in short form
V View the current change with full diffs
R Display the status of resolved and unresolved merges
q Quit the resubmit operation&amp;lt;
? Display this help.&lt;/pre&gt;
&lt;p&gt;In this case I wanted to resubmit all of the files except the solution files, so I selected e&lt;/p&gt;
&lt;p&gt;That merged my change back in, but then dropped me back to the command prompt so I could further mangle the files. A quick revert got rid of the changed solution files, and then I used p4 resubmit -Re to resume the resubmit process.&lt;/p&gt;
&lt;pre&gt;p4 revert ....sln
p4 resubmit -Re&lt;/pre&gt;
&lt;p&gt;P4D submitted the change again, and cleaned up the shelf for me since I no longer needed it. With that tidied up I was ready to push and share my changes with the community.&lt;/p&gt;
&lt;pre&gt;p4 push&lt;/pre&gt;
&lt;p&gt;Sharing that broken change wouldn&amp;#8217;t have been the end of the world, but I felt so much more in control being able to clean up those .sln files before pushing out my change. Ever wish you could undo a merge between branches? With p4 unsubmit you can. Helix Versioning Engine gives you a way to safely experiment, modifying history as need be to make sure the changes your coworkers see are the ones you want them to see.&lt;/p&gt;
&lt;p&gt;Interested in trying it yourself? You&amp;#8217;re just a download of our Helix Versioning Engine and p4 init away from being able to try this all yourself. If you&amp;#8217;d like to push to a shared server the Workshop has been running 2015.1 since beta, and Helix Cloud is also using it. As always we&amp;#8217;re here to help, so if you have questions, just shout!&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:living-la-vida-helix-submitting-without-fear.html</guid></item><item><title>Meet &amp; Greet and Workshop Tickets · GitHub</title><link>http://ciandcd.github.io/meet-greet-and-workshop-tickets-github.html</link><description>From:&lt;a href="https://github.com/blog/2027-codeconf-updates-meet-greet-and-workshop-tickets"&gt;https://github.com/blog/2027-codeconf-updates-meet-greet-and-workshop-tickets&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/4154342/8258112/331e2444-1667-11e5-8e3a-d14384941fd5.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/4154342/8258112/331e2444-1667-11e5-8e3a-d14384941fd5.png" alt="codeconf-twitter-topheader"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://codeconf.com/"&gt;CodeConf&lt;/a&gt; is next week, and I couldn't be more excited to bring the open source community together to exchange ideas and have some fun in Nashville. There are a few updates I'd like to share: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On June 24, the day before the conference, we'll be hosting a &lt;strong&gt;meet &amp;amp; greet&lt;/strong&gt; for attendees who would like to register early. This event is free and open to the public, so if you aren't attending CodeConf but live in the Nashville area and would like to stop by, &lt;a href="http://www.ticketbase.com/events/codeconf-2015"&gt;grab a ticket here&lt;/a&gt;. We'll be congregating on the second floor of &lt;a href="http://theacmenashville.com/"&gt;Acme Feed &amp;amp; Seed&lt;/a&gt; downtown beginning at 5:30pm &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;workshop schedule&lt;/strong&gt; has been updated, and I have opened up more space in each session for those interested. If you'd like to snag one of the newly available tickets, &lt;a href="http://www.ticketbase.com/events/codeconf-2015"&gt;go for it!&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's still time to grab a CodeConf ticket. &lt;a href="http://codeconf.com/"&gt;Take a look at the website for the full schedule of sessions, workshops, and sponsors.&lt;/a&gt; I hope to see you in Nashville. &lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:meet-greet-and-workshop-tickets-github.html</guid></item><item><title>Merging Without a Base in Perforce Helix</title><link>http://ciandcd.github.io/merging-without-a-base-in-perforce-helix.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150623/merging-without-base-perforce-helix"&gt;http://www.perforce.com/blog/150623/merging-without-base-perforce-helix&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;I recently had a question about merging files in Perforce Helix that have no direct lineage.&lt;/p&gt;
&lt;p&gt;For example, let's say you want to merge file //depot/main/foo.c (source) to //depot/dev/foo.c (target), which is fine, but you realize the target file was not branched from the source and there is no base (common ancestor). To determine the base, Helix uses integration history created by previous integration commands to know which file revisions to integrate. However, since dev/foo.c was not branched from main/foo.c there is no integration history between these two paths: a baseless merge. &amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/Merge-No-Base.png"&gt;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/baseless-default.png"&gt;&lt;/p&gt;
&lt;p&gt;To handle this scenario Helix does a two-way merge for the best results. All the diffs are considered conflicts. Why? Because in the absence of a base, we do not have any way to determine what differences are &amp;#8220;changes&amp;#8221; relative to the base, which is how we normally determine whether diffs are conflicting or not. We found the best and most accurate way to handle this scenario is scheduling a two-way merge.&amp;#160; &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;
&lt;p&gt;In the past, Helix would not allow baseless merges without the use of p4 integ command flags;&lt;/p&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; -i/-I uses the first revision of the source as the base for baseless merges, rather than an empty file.&amp;#160;&amp;#160;&amp;#160;&lt;/p&gt;
&lt;p&gt;With the old "-i" behavior, an arbitrarily chosen base can lead to lost changes as seen in the figure below. &amp;#160;&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/baseless-wipeout.png"&gt;&lt;/p&gt;
&lt;p&gt;This is why we changed the behavior. If you are stuck in the past, these flags are preserved for backward compatibility but are deprecated.&lt;/p&gt;
&lt;p&gt;To recap, with the current integration behavior, no flags are needed to handle baseless merges.&amp;#160; The Helix integration engine does the right thing for a more realistic and accurate result! Happy merging!&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:merging-without-a-base-in-perforce-helix.html</guid></item><item><title>Mobile File Finder · GitHub</title><link>http://ciandcd.github.io/mobile-file-finder-github.html</link><description>From:&lt;a href="https://github.com/blog/2032-mobile-file-finder"&gt;https://github.com/blog/2032-mobile-file-finder&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;The &lt;a href="https://github.com/blog/793-introducing-the-file-finder"&gt;GitHub File Finder&lt;/a&gt; is now available on your mobile device. Just click the "Jump to file" link on any repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/2567/8341351/26389bd6-1a79-11e5-98ff-da90172c03b2.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/2567/8341351/26389bd6-1a79-11e5-98ff-da90172c03b2.png" alt="mobile-file-finder"&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:mobile-file-finder-github.html</guid></item><item><title>News from InfoSecurity 2015</title><link>http://ciandcd.github.io/news-from-infosecurity-2015.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150610/news-infosecurity-2015-0"&gt;http://www.perforce.com/blog/150610/news-infosecurity-2015-0&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/infoSec-blog-post.png"&gt;&lt;/p&gt;
&lt;p&gt;I've just returned from my first visit to &lt;a href="http://www.infosecurityeurope.com/"&gt;InfoSecurity 2015 in London&lt;/a&gt;. With the launch earlier this year of &lt;a href="http://www.perforce.com/threat-detection"&gt;Perforce Helix Threat Detection&lt;/a&gt; this was a great opportunity to review the state of the cyber-security world, hear about the key challenges facing governments, businesses and individuals and review some of the solutions being offered. This couldn't be more timely as, right when I'm writing this, it has been &lt;a href="http://www.bbc.co.uk/news/world-us-canada-33017310"&gt;announced&lt;/a&gt; that the U.S. government suffered a serious attack earlier this year which compromised the personal details of thousands of federal employees.&lt;/p&gt;
&lt;p&gt;My particular area of interest is the emerging role of security in DevOps. There are a few key aspects to consider:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
		&lt;p&gt;As a developer what do you need to do and how does that fit with agile and development processes?&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;As a Release Manager/Operations Specialist/DevOps Engineer what do you need to know to roll out and manage secure applications?&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;p&gt;As a Chief Information Security Officer or Risk Manager what is going on in the development and operations areas that I ought to be concerned about?&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I haven't got space here to cover all of these topics, but here are a few highlights from the conversations I had at the conference.&lt;/p&gt;
&lt;p&gt;Development Managers and DevOps specialists are increasingly aware of the need for secure applications. They are concerned that as release cycle times reduce with the adoption of Continuous Delivery they don't reduce security nor slow down deliveries. Some companies are working out how to do this by involving security experts in the earliest stages of sprint planning and ensuring security stories are &amp;#8220;groomed&amp;#8221; to ensure they are properly positioned for priority in their backlogs. They're also adopting tools for automated code and application validation. It was interesting to see an increasing number of tools addressing the need for dynamic security testing. Although the term seems to have been around a few years already, there were a number of people talking about &amp;#8220;&lt;a href="https://vimeo.com/36342207"&gt;Rugged DevOps&lt;/a&gt;&amp;#8221; and I think this is an area that will continue to grow.&lt;/p&gt;
&lt;p&gt;Security experts, especially those involved in IT audits or risk assessments are busier than ever. Some are aware of the potential risks that may exist in their development organizations but I suspect the majority are not. This is the result of two issues.&lt;/p&gt;
&lt;p&gt;Firstly, they may not fully appreciate the value of the software being developed. They know that they need to protect customer and staff personal data, but they don't necessarily realize that the software is actually their company&amp;#8217;s competitive differentiator and could be critical if leaked to a competitor.&lt;/p&gt;
&lt;p&gt;Secondly there is a lot of technology involved that they don't understand. They may be familiar with firewalls, VPNs, email, etc., but developers often bring tools into the business without their knowledge and these tools, such as Subversion or Git are inherently vulnerable. It's increasingly hard to keep track of business documents in a world full of email, cloud file sharing services and BYOD mobiles, but this technical software content is even harder to grasp.&lt;/p&gt;
&lt;p&gt;I saw a number of tools that try to address some of these problems by monitoring network traffic rather than trying to lock down each application. This generates another problem though &amp;#8211; if you're monitoring hundreds or thousands of different file types and communications, it quickly becomes an impossible management challenge.&lt;/p&gt;
&lt;p&gt;A few tools are trying to address that problem by using analytics to analyze the basic data and infer what looks like suspicious behavior.&amp;#160; This helps with the management issue but they still don't understand the context of the data being moved around the organization which makes them inefficient for DevOps.&lt;/p&gt;
&lt;p&gt;I didn't see anything that was close to &lt;a href="http://www.perforce.com/threat-detection"&gt;Perforce Helix Threat Detection&lt;/a&gt;, which focuses on protecting this valuable IP being created by design and development teams. Because it uses the rich data available from the &lt;a href="http://www.perforce.com/helix"&gt;Helix Versioning Engine&lt;/a&gt; it understands the context of the files being accessed. It can not only track that a user may be accessing more files than usual (and most tools can't work out what &amp;#8220;normal&amp;#8221; means), but it also understands whether those files are in projects they &amp;#8220;normally&amp;#8221; use or whether they're using the files in ways that are unusual for the user.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m really looking forward to the &lt;a href="http://info.perforce.com/webinar-overview-security-devops.html"&gt;webinar Perforce are hosting on June 16th&lt;/a&gt; where the Forrester DevOps Analysts, Kirt Bittner, and Security Analyst, Rick Holland will talk about the issues raised above and the solutions to them.&amp;#160;&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:news-from-infosecurity-2015.html</guid></item><item><title>Next Round of Online Training: Helix DVCS</title><link>http://ciandcd.github.io/next-round-of-online-training-helix-dvcs.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150612/next-round-online-training-helix-dvcs"&gt;http://www.perforce.com/blog/150612/next-round-online-training-helix-dvcs&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p align="center"&gt;&lt;img alt="Perforce Helix Training" src="/sites/default/files/training-blogimage.png"&gt;&lt;/p&gt;
&lt;p&gt;Back in March, we announced our new &lt;a href="http://www.perforce.com/blog/150402/now-available-helix-versioning-engine-dvcs-capabilities"&gt;Helix platform&lt;/a&gt; which includes highly anticipated distributed version control (DVCS) capabilities. For some of you, hearing that we now offer DVCS may have been music to your ears. For others, it may have invoked curiosity and added another acronym to your lexicon.&lt;/p&gt;
&lt;p&gt;Given the recent proliferation of Git-style workflows, we are seeing a lot of developers finding themselves working with their own private, local versioning repositories while collaborating with teammates via the new init/clone/pull/push command set. But did you know that you can now rewrite the history of changes in your personal repository before sharing them?&lt;/p&gt;
&lt;p&gt;To help you come up to speed with Helix DVCS, we are pleased to announce the availability of a new instructor-led training course. The Helix DVCS course will take place online via Webex and will include hands-on lab exercises within our lab environment.&lt;/p&gt;
&lt;p&gt;The class is taught by our expert Professional Services consultants who have a lot of experience advising customers. Topics on this new half-day course will include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Why do you need DVCS?&lt;/li&gt;
	&lt;li&gt;Overview of DVCS architecture and workflows&lt;/li&gt;
	&lt;li&gt;Basic DVCS operations&lt;/li&gt;
	&lt;li&gt;How to perform initial setup&lt;/li&gt;
	&lt;li&gt;Working with multiple streams&lt;/li&gt;
	&lt;li&gt;Rewriting history&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The first class is now scheduled for European customers on June 29, 9am &amp;#8211; 1pm, British Summer Time (GMT+1). We will have a DVCS training for North American customers in the weeks that follow. So &lt;a href="http://www.perforce.com/support-services/instructor-led-training/course-schedule"&gt;sign up here&lt;/a&gt; and bring along your questions about DVCS.&amp;#160;&lt;/p&gt;
&lt;p&gt;The class does assume that you are already familiar with Perforce Helix, so if you&amp;#8217;re new to Helix, we also offer introductory courses. Check out our &lt;a href="http://www.perforce.com/support-services/instructor-led-training/course-schedule"&gt;course schedule&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;Any questions, just email training@perforce.com.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:next-round-of-online-training-helix-dvcs.html</guid></item><item><title>Note on license expiration in GitLab 7.10.5 EE</title><link>http://ciandcd.github.io/note-on-license-expiration-in-gitlab-7105-ee.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/04/note-on-license-expiration-in-gitlab-7-dot-10-dot-5-ee/"&gt;https://www.gitlab.com/2015/06/04/note-on-license-expiration-in-gitlab-7-dot-10-dot-5-ee/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Note on license expiration in GitLab 7.10.5 EE&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;If you&amp;#8217;re upgrading to GitLab Enterprise Edition 7.11, which introduces
licenses keys, you&amp;#8217;re probably planning to upgrade to 7.10.5 first.
This way you are able to &lt;a href="https://about.gitlab.com/2015/05/27/gitlab-7-dot-10-dot-5-released/"&gt;upload your license key in advance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of our customers notified us of a faulty description in the license
uploader in GitLab 7.10.5. Upon uploading, the license is checked properly,
however the text in the license view in the admin page in GitLab will show:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_10_5/wrong.png" alt="Wrong text"&gt;&lt;/p&gt;

&lt;p&gt;While it should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/7_10_5/correct.png" alt="Correct text"&gt;&lt;/p&gt;

&lt;p&gt;This only occurs in GitLab 7.10.5 and does not affect functionality.
The license information is correctly shown in GitLab 7.11 and up.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments do not hesitate to comment below
or contact support.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:note-on-license-expiration-in-gitlab-7105-ee.html</guid></item><item><title>Octicon Buttons Are Here! · GitHub</title><link>http://ciandcd.github.io/octicon-buttons-are-here-github.html</link><description>From:&lt;a href="https://github.com/blog/2030-octicon-buttons-are-here"&gt;https://github.com/blog/2030-octicon-buttons-are-here&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Graphs, and pencils, and locks...Oh my! Now you can collect themed &lt;a href="https://octicons.github.com"&gt;Octicon&lt;/a&gt; buttons with the &lt;a href="http://github.myshopify.com/products/octicon-buttons"&gt;four
new button packs&lt;/a&gt; offered in the &lt;a href="http://github.myshopify.com/"&gt;GitHub Shop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.myshopify.com/products/octicon-buttons"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/5945961/8299483/e7da3de6-192d-11e5-9613-bed81f1c890b.jpg" alt="Octicon Buttons"&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:octicon-buttons-are-here-github.html</guid></item><item><title>P4Python goes pip</title><link>http://ciandcd.github.io/p4python-goes-pip.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150514/p4python-goes-pip-0"&gt;http://www.perforce.com/blog/150514/p4python-goes-pip-0&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/title-tip-tricks9.png"&gt;&lt;/p&gt;
&lt;p&gt;In recent years Python has changed its package manager strategy, and the result is &lt;strong&gt;pip&lt;/strong&gt;. Pip is a powerful package manager that simplifies the creation and consumption of Python packages, turning the &lt;a href="http://pypi.python.org"&gt;Python Package Index&lt;/a&gt; into a hub of an ever-growing number of useful packages.&lt;/p&gt;
&lt;p&gt;P4Python always had to stay away from the package index because it requires binary builds for some platforms. With the advent of the &lt;a href="http://pythonwheels.com/"&gt;wheel&lt;/a&gt; format, this has changed. Wheels are Python packages that can contain binary builds on Windows and OSX, allowing package creators to precompile their packages.&lt;/p&gt;
&lt;p&gt;P4Python 2015.1 has been uploaded to the Python Package Index. For you this means installing the latest release of P4Python becomes a simple:&lt;/p&gt;
&lt;pre&gt;    pip install p4python&lt;/pre&gt;&lt;p&gt;Easier, isn&amp;#8217;t it?&lt;/p&gt;
&lt;p&gt;However, there are a few preparations you need to make before you can run this command the first time successfully:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;You need to have the right version of Python installed: 2.7, 3.3 or 3.4. Python 2.6 is supported but we have not uploaded binaries for it.&lt;/li&gt;
&lt;li&gt;You need to install pip. It comes with Python 3.4 and 2.7.9 automatically; everyone else will need to install it, for example from &lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;here&lt;/a&gt;, and make sure the pip executable is in your PATH.&lt;/li&gt;
&lt;li&gt;There is currently no binary wheel format available for Linux, so pip will download the source code of P4Python and attempt to build it. This requires &amp;#8216;python-dev&amp;#8217; and &amp;#8216;build-essential&amp;#8217; installed on Debian-based distributions (using apt) and the equivalent on RPM-based (using yum).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In order to build P4Python automatically from Pip, setup.py has also gained some new tricks.&lt;/p&gt;
&lt;p&gt;First of all, it now uses setuptools and not distutils, so you need to have setuptools installed if you want to build it on, say, Python 2.6.&lt;/p&gt;
&lt;p&gt;If you run setup.py without the &amp;#8211;apidir option, setup will now go off and attempt to download the correct P4API binaries from &lt;a href="ftp://ftp.perforce.com"&gt;the Perforce FTP site&lt;/a&gt; for your platform. The API will be downloaded and unpacked into the temp directory and used automatically by the build process.&lt;/p&gt;
&lt;p&gt;You can still download the source or the packages, of course, and install P4Python the traditional way if you prefer.&lt;/p&gt;
&lt;p&gt;I found pip amazingly simple to use, and I hope it will make your life a lot easier when installing P4Python. As usual, if you have any issues or requests, let us know in &lt;a href="http://www.perforce.com/support-services"&gt;Perforce Support&lt;/a&gt; or ping me on my Twitter handle &lt;a href="https://twitter.com/p4sven"&gt;@p4sven&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:p4python-goes-pip.html</guid></item><item><title>Perforce Takes to the Road in 2015</title><link>http://ciandcd.github.io/perforce-takes-to-the-road-in-2015.html</link><description>From:&lt;a href="http://www.perforce.com/blog/150622/perforce-takes-road-2015"&gt;http://www.perforce.com/blog/150622/perforce-takes-road-2015&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;We&amp;#8217;re hitting the road again this year with a series of one-day events focused on better ways to build and secure complex products. These events will prove interesting to professionals at every phase of the product lifecyle and from companies of any size.&lt;/p&gt;
&lt;p align="center"&gt;&lt;img alt="" src="/sites/default/files/perforce-on-tour-cities.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://info.perforce.com/PerforceOnTour2015.html?utm_source=p4blog&amp;amp;utm_medium=social&amp;amp;utm_campaign=UK_2015_EP4_Perforce_on_Tour"&gt;Register today&lt;/a&gt;&amp;#160;for in-depth discussions of the challenges companies face in getting complex products to market quickly without sacrificing quality or security. These events are also great opportunities to network with your peers and to hear about the latest innovations from Perforce. No matter if you&amp;#8217;re a Perforce user or not, you&amp;#8217;ll find it a valuable use of your time.&amp;#160;&lt;/p&gt;
&lt;h4&gt;Hear from the Experts&lt;/h4&gt;
&lt;p&gt;Hear from thought leaders who are well practiced in modern development practices like Continuous Delivery and DevOps. You&amp;#8217;ll get practical advice that you can put to good use immediately.&lt;/p&gt;
&lt;h4&gt;Keep Good Company&lt;/h4&gt;
&lt;p&gt;Spend a day with like-minded individuals and innovative product developers. The majority of sessions will be by Perforce customers, who will share practical advice from their real-world experiences. Of course, our trainers and consultants will also be on hand to answer any questions you have about new products and capabilities from Perforce.&lt;/p&gt;
&lt;h4&gt;Stay for the Party!&lt;/h4&gt;
&lt;p&gt;These events are free of charge and full of informational sessions. They also promise to be very fun. No Perforce event is complete without an elegant setting, great food and lavish drinks to end the day in style. You won&amp;#8217;t be disappointed!&lt;/p&gt;
&lt;p&gt;So far, we&amp;#8217;ve scheduled tour stops in the following cities (with more to come):&lt;/p&gt;
&lt;p&gt;Milan &amp;#8211; June 25&lt;br&gt;
	Sydney &amp;#8211; July 21&lt;br&gt;
	Berlin &amp;#8211; Sept 16&lt;br&gt;
	London &amp;#8211; Sept 22&lt;/p&gt;
&lt;p&gt;Space is limited, so&amp;#160;&lt;a href="http://info.perforce.com/PerforceOnTour2015.html?utm_source=p4blog&amp;amp;utm_medium=social&amp;amp;utm_campaign=UK_2015_EP4_Perforce_on_Tour"&gt;register today&lt;/a&gt; and secure your place!&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:perforce-takes-to-the-road-in-2015.html</guid></item><item><title>Read-only deploy keys · GitHub</title><link>http://ciandcd.github.io/read-only-deploy-keys-github.html</link><description>From:&lt;a href="https://github.com/blog/2024-read-only-deploy-keys"&gt;https://github.com/blog/2024-read-only-deploy-keys&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;You can now create deploy keys with read-only access. A deploy key is an SSH key that is stored on your server and grants access to a single GitHub repository. They are often used to clone repositories during deploys or continuous integration runs. Deploys sometimes involve merging branches and pushing code, so deploy keys have always allowed both read and write access. Because write access is undesirable in many cases, you now have the ability to create deploy keys with read-only access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.githubusercontent.com/assets/1144197/8164374/e76a0e24-1345-11e5-93b0-fd04b6a3446c.png" target="_blank"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/1144197/8164374/e76a0e24-1345-11e5-93b0-fd04b6a3446c.png" alt="viewing and adding deploy keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New deploy keys created through GitHub.com will be read-only by default and can be given write access by selecting "Allow write access" during creation. Access level can be specified when &lt;a href="https://developer.github.com/v3/repos/keys/"&gt;creating deploy keys from the API&lt;/a&gt; as well.&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:read-only-deploy-keys-github.html</guid></item><item><title>Release Manager - The invisible hero</title><link>http://ciandcd.github.io/release-manager-the-invisible-hero.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/06/25/release-manager-the-invisible-hero/"&gt;https://www.gitlab.com/2015/06/25/release-manager-the-invisible-hero/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Real heroes are sometimes unknown and we can only see their accomplishments. In GitLab we have one invisible hero every month, when we have our monthly release. As you may know, we&amp;#8217;ve never failed to release a new GitLab version on the 22nd of every month.&lt;/p&gt;

&lt;p&gt;As GitLab grows, the release process becomes more complex and becoming a release manager is a more difficult, but a necessary job.&lt;/p&gt;

&lt;p&gt;Eight working days before the next release, and we start the countdown. A new volunteer &amp;#8220;hero&amp;#8221; is elected by the team.&lt;/p&gt;

 


&lt;h2&gt;But, why is it such a challenging job?&lt;/h2&gt;

&lt;p&gt;A release manager is the person who makes sure that everything is ready for the monthly release. They follow up on every single detail and make sure that the new version is working perfectly, including all the improvements and features. They also need to delegate some tasks and make sure that the procedure is being followed.&lt;/p&gt;

&lt;p&gt;Consider that right now, GitLab is huge. Our community dishes out around 900 commits a month on GitLab alone. Add Enterprise Edition, GitLab CI and runners, Omnibus-GitLab packages and you get several thousand changes done by hundreds of developers across projects which need to come together (and work) in one day. This is a lot of responsibility for one person.&lt;/p&gt;

&lt;h2&gt;So, how do we manage to make it all into a single release every month?&lt;/h2&gt;

&lt;p&gt;In GitLab we have a &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master/doc/release"&gt;release directory&lt;/a&gt; for the release documents. The most powerful document for the release is called &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/release/monthly.md"&gt;monthly.md&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Release manager tasks can be broken down into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure that GitLab CE, EE and GitLab CI repositories have an updated installation and upgraded guides&lt;/li&gt;
&lt;li&gt;Make sure that the Omnibus-GitLab package will be ready for the release&lt;/li&gt;
&lt;li&gt;Release the RC version, do QA, deploy on GitLab.com and ci.GitLab.com&lt;/li&gt;
&lt;li&gt;Follow reported regressions and make sure that developers are aware/working on a fix&lt;/li&gt;
&lt;li&gt;Decide which fixes can go into the release&lt;/li&gt;
&lt;li&gt;Coordinate the package building&lt;/li&gt;
&lt;li&gt;Make sure that the blog post contains all the necessary information&lt;/li&gt;
&lt;li&gt;Do the final release&lt;/li&gt;
&lt;li&gt;Decide if there needs to be a patch release&lt;/li&gt;
&lt;li&gt;Coordinate patch release&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;A release manager volunteers to work late (or early) to get the packages out or deploy the new version to one of our services. No one is forcing you to do so, but if you don&amp;#8217;t, it will complicate the following day. This is a weakness in our process, so we need to work on improving this situation.&lt;/p&gt;

&lt;h2&gt;History&lt;/h2&gt;

&lt;p&gt;I don&amp;#8217;t know the exact date when the release manager duty was thought off but it was &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/commit/223070b3fe9cb302d3d47ba5a616d90bab8910fd"&gt;around version 6.4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At that time, we had a couple of other things that were the release manager tasks: Notify everyone of the code-freeze (nothing was merged to master during this time), enforce it and build the packages manually. Yes, manually. This meant connecting to all machines separately and doing few commands to initiate package building. GitLab.com had a separate repository with some custom code, so the deploy needed to be done manually too. I still have nightmares as a result of these 2 things.&lt;/p&gt;

&lt;p&gt;As you can imagine, this made the release manager tasks very undesirable and limited to a few people. Even with all the improvements that followed, this job is still not popular.&lt;/p&gt;

&lt;h2&gt;Improvements&lt;/h2&gt;

&lt;p&gt;Since the painful beginings of the release manager tasks, we&amp;#8217;ve done number of improvements. We did a massive change to the process and made it even more continuous integration oriented than it was before. There are risks to it, but also massive gains:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Code freeze was removed so there is no need to watch over anyone&amp;#8217;s shoulders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keeping X git repos in sync. Syncing repositories is now a one-line script where the argument is the version that is being released&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatizing our release process. Omnibus-gitlab packages infrastructure got built, so only supplying the shas of the release version is enough to kick off the automatic builds on all platforms and machines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Infrastructure for deploying GitLab.com and ci.gitlab.com got created and they are being updated by using a few lines of commands and packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The release documentation has been updated so many times that room for error is minimal (if you follow the steps closely)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You would expect that all these improvements would make the Release manager job more appealing since you get to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boss around over all of your colleagues. This includes the project lead and the CEO. It is especially sweet when you can say NO to an unreasonable request. After all, all requests are unreasonable but your own and now you get to push that through&lt;/li&gt;
&lt;li&gt;You decide at your leasure when something will be included and pushed&lt;/li&gt;
&lt;li&gt;You are the boss of everything (for a period of time) because everyone says: &amp;#8220;Hey, you are the release manager, your call&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;With all the hard work, how do we choose a volunteer release manager?&lt;/h2&gt;

&lt;p&gt;Choosing the release manager is probably one of the hardest tasks.&lt;/p&gt;

&lt;p&gt;During our team call, the release manager for the previous release mentions the subject of selecting a new release manager.&lt;/p&gt;

&lt;p&gt;At that exact moment, there&amp;#8217;s silence, cameras and mics start breaking down, people forget the whole English language, there is always someone at the door so you need to open it and lots of faces are just looking around the room.&lt;/p&gt;

&lt;p&gt;After a few minutes of silence, decision is made, but mostly because we are all friends and we don&amp;#8217;t want to see a colleague suffer for another month.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve tried improving the desirablity of this task by making procedures easier, but that is still a challenge.&lt;/p&gt;

&lt;p&gt;At some point I&amp;#8217;ve asked what kind of reward we could put forward to make people happy to volunteer, but there are no good ideas yet.&lt;/p&gt;

&lt;p&gt;My ideas where limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Material reward: a gift might be OK for some people, but others have no need for things. In this case we could publicly thank them and acknowledge their work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#8220;Spiritual&amp;#8221; reward: We do say &amp;#8220;thank you&amp;#8221; to the RM a lot, but this gets spent. Tweeting the name of the release manager might work as a recongnition for some, but I am afraid that it won&amp;#8217;t work for introverts in our team. Being more public might also yield more work for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Buying a beer or cocktail: This feels like something that would be appreciated, but it would only work for a few employees, since we are a very remote company. Maybe a beer voucher could be sent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With that I was out of ideas. This blog post is an attempt to say a thank you to all the release managers. You know who you are and you are a true invisible hero for accomplishing the tasks to make everything go out on schedule.&lt;/p&gt;

&lt;p&gt;Do you have any ideas?&lt;/p&gt;

&lt;h3&gt;Release manager - my hero.&lt;/h3&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:release-manager-the-invisible-hero.html</guid></item><item><title>Security advisory for Logjam vulnerability</title><link>http://ciandcd.github.io/security-advisory-for-logjam-vulnerability.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/21/security-advisory-for-logjam-vulnerability/"&gt;https://www.gitlab.com/2015/05/21/security-advisory-for-logjam-vulnerability/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1 class="title"&gt;Security advisory for Logjam vulnerability&lt;/h1&gt;
                     
                    
                  

                  &lt;p&gt;A recently announced &lt;a href="https://weakdh.org/"&gt;Logjam vulnerability&lt;/a&gt; allows an attacker to do a man-in-the-middle attack, allowing them to downgrade a TLS connection to 512-bit DH parameters. More details on what that is and means can be &lt;a href="https://www.openssl.org/blog/blog/2015/05/20/logjam-freak-upcoming-changes/"&gt;found on openssl blog&lt;/a&gt;.&lt;/p&gt;

 


&lt;h3&gt;Impact on GitLab&lt;/h3&gt;

&lt;p&gt;GitLab is using, by default, up-to-date SSL ciphers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Export Cipher Suites&lt;/code&gt; are not used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Elliptic-Curve Diffie-Hellman&lt;/code&gt; ciphers are used&lt;/li&gt;
&lt;li&gt;By default, 1024-bit DH groups are used&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This means that GitLab is safe in principle. When using 1028-bit DH groups there is a small chance that an attacker with nation-state resources could be eavesdropping.&lt;/p&gt;

&lt;p&gt;If you find this insufficient for your GitLab installation, you can generate 2048-bit DH groups and enable the &lt;code&gt;ssl_dhparam&lt;/code&gt; option in NGINX config.&lt;/p&gt;

&lt;p&gt;Params can be generated with:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;p class="line"&gt;openssl dhparam -out dhparams.pem 2048
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;After the &lt;code&gt;dhparams.pem&lt;/code&gt; file has been generated you will need to tell Nginx where the file is located:&lt;/p&gt;

&lt;h4&gt;GitLab installations using omnibus-gitlab packages&lt;/h4&gt;

&lt;p&gt;For packages version 7.11.0 and up.&lt;/p&gt;

&lt;p&gt;Place the &lt;code&gt;dhparams.pem&lt;/code&gt; file in &lt;code&gt;/etc/gitlab/ssl/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;, enable the following setting:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class="ruby"&gt;&lt;p class="line"&gt;&lt;p class="n"&gt;nginx&lt;/p&gt;&lt;p class="o"&gt;[&lt;/p&gt;&lt;p class="s1"&gt;'ssl_dhparam'&lt;/p&gt;&lt;p class="o"&gt;]&lt;/p&gt; &lt;p class="o"&gt;=&lt;/p&gt; &lt;p class="s2"&gt;"/etc/gitlab/ssl/dhparams.pem"&lt;/p&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;and do &lt;code&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;More information can be &lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/7-11-stable/doc/settings/nginx.md#using-custom-ssl-ciphers"&gt;found in the omnibus-gitlab nginx documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Workaround for packages prior to version 7.11.0&lt;/p&gt;

&lt;p&gt;Place the &lt;code&gt;dhparams.pem&lt;/code&gt; file in &lt;code&gt;/etc/gitlab/ssl/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;, enable the following setting:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre class="line-numbers"&gt;&lt;p class="line-number"&gt;1&lt;/p&gt;
&lt;/pre&gt;&lt;pre&gt;&lt;code class="ruby"&gt;&lt;p class="line"&gt;&lt;p class="n"&gt;nginx&lt;/p&gt;&lt;p class="o"&gt;[&lt;/p&gt;&lt;p class="s1"&gt;'custom_gitlab_server_config'&lt;/p&gt;&lt;p class="o"&gt;]&lt;/p&gt; &lt;p class="o"&gt;=&lt;/p&gt; &lt;p class="s2"&gt;"ssl_dhparam /etc/gitlab/ssl/dhparams.pem;&lt;/p&gt;&lt;p class="se"&gt;\n&lt;/p&gt;&lt;p class="s2"&gt;"&lt;/p&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;and run &lt;code&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;GitLab installations from source&lt;/h4&gt;

&lt;p&gt;Place the generated &lt;code&gt;dhparams.pem&lt;/code&gt; in a suitable location, for example &lt;code&gt;/etc/nginx/ssl/dhparams.pem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In GitLab nginx config find &lt;code&gt;ssl_dhparam&lt;/code&gt; config and set it to &lt;code&gt;ssl_dhparam /etc/nginx/ssl/dhparams.pem;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reload your nginx config.&lt;/p&gt;

&lt;h3&gt;Impact on GitLab.com&lt;/h3&gt;

&lt;p&gt;GitLab.com is using 1028-bit DH groups. Due to incompatibilities with older Java-based clients we haven&amp;#8217;t enabled 2048-bit DH params yet as this would prevent some people from using GitLab.com. We are looking into ways to keep a good SSLlabs score and allowing users with older Java-base clients to use GitLab.com.&lt;/p&gt;

&lt;p&gt;We are examining the impact of this and we will update this blog post once we have more information.&lt;/p&gt;

                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:security-advisory-for-logjam-vulnerability.html</guid></item><item><title>Simple words for a GitLab Newbie</title><link>http://ciandcd.github.io/simple-words-for-a-gitlab-newbie.html</link><description>From:&lt;a href="https://www.gitlab.com/2015/05/18/simple-words-for-a-gitlab-newbie/"&gt;https://www.gitlab.com/2015/05/18/simple-words-for-a-gitlab-newbie/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;For most of us, when we work with a new tool, there&amp;#8217;s a process of learning the right vocabulary and the best steps to make things happen; this while we try to keep the best attitude. Not very long ago, I learned how to use Git and GitLab and it was a little bit painful. I read a lot about it, but it was mostly vocabulary that didn&amp;#8217;t make any sense to me. If you&amp;#8217;ve been there or if you are there now, you&amp;#8217;ll know what I&amp;#8217;m talking about (some people may have it naturally).&lt;/p&gt;

&lt;p&gt;So, to make this learning process easier for others, I took many of the basic Git vocabulary and wrote easy definitions for each word. I hope they are useful for you and please share them with your Git and Gitlab newbie friends!&lt;/p&gt;

 


&lt;h2&gt;Cloud Based Services&lt;/h2&gt;

&lt;p&gt;What is a cloud based service? It&amp;#8217;s a service or resource that is opposed to services that are hosted on the servers inside a company, which is the traditional way of doing it. It helps people and companies lower their costs and be more efficient while helping with different functions such as trannings, storage, etc.
GitLab.com is a cloud based service because it can be hosted both in house and in the cloud.&lt;/p&gt;

&lt;h2&gt;Source control or revision control software&lt;/h2&gt;

&lt;p&gt;What is source control? It&amp;#8217;s a system that records and manages changes to projects, files and documents. It helps you recall specific versions later. It also makes it easier to collaborate, because it shows who has changed what and helps you combine contributions.&lt;/p&gt;

&lt;h2&gt;Continuous Integration&lt;/h2&gt;

&lt;p&gt;What is continuous integration? It&amp;#8217;s the system of continuously incorporating the work advances with a shared mainline in a project. Git and GitLab together make continuous integration happen.&lt;/p&gt;

&lt;h2&gt;Continuous deployment&lt;/h2&gt;

&lt;p&gt;What is continuous deployment? It means that whenever there is a change to the code, it is deployed or made live immediately. This is in contrast to continous integration, where code is continuously being merged in the mainline and is always ready to be deployed, rather than actually deployed.
When people talk about CI and CD what they usually mean to say is that they are constantly and automatically testing their code against their tests using a tool such as GitLab CI and upon passing to a certain action. That action could be merging the code into a branch (master, production, etc), deploying it to a server or building a package / piece of software out of it.
Non-continuous integration would be everyone working on something and only integrating all the work as the very last step. Obviously, that results in many conflicts and issues, which is why CI is adopted widely nowadays.&lt;/p&gt;

&lt;h2&gt;Git&lt;/h2&gt;

&lt;p&gt;What is Git? Git is a system where you can create projects of different sizes with speed and efficiency. It helps you manage code, communicate and collaborate on different software projects.
Git will allow you to go back to a previous status on a project or to see its entire evolution since the project was created.
You could think of it as a time machine which will allow you to go back in time to whenever you&amp;#8217;d like in your project.
With Git, 3 basic issues were solved when working on projects:
1. It became easier to manage large projects.
2. It helps you avoid overwriting the team&amp;#8217;s advances and work.
3. With git, you just pull the entire code and history to your machine, so you can calmly work in your own little space without interference or boundaries. It&amp;#8217;s much simpler and much more light-weight.&lt;/p&gt;

&lt;h2&gt;Repository&lt;/h2&gt;

&lt;p&gt;What is a repository? The place where the history of your work is stored.&lt;/p&gt;

&lt;h2&gt;Remote repository&lt;/h2&gt;

&lt;p&gt;What is a remote repository? It&amp;#8217;s a repository that is not-on-your-machine, so it&amp;#8217;s anything that is not your computer. Usually, it is online, GitLab.com for instance. The main remote repository is usually called &amp;#8220;Origin&amp;#8221;.&lt;/p&gt;

&lt;h2&gt;Commit&lt;/h2&gt;

&lt;p&gt;What is a commit? It&amp;#8217;s the way you call the latest changes of source code that you made on a repository. When changes are tracked, commits mark the changes on a document.&lt;/p&gt;

&lt;h2&gt;Master&lt;/h2&gt;

&lt;p&gt;What is a master? It&amp;#8217;s how you call the main and definitive branch (the independent line of development of a project).&lt;/p&gt;

&lt;h2&gt;Branch&lt;/h2&gt;

&lt;p&gt;What is a branch? It&amp;#8217;s an independent line of development. They are a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in taking the source from someone&amp;#8217;s repository (the place where the history of your work is stored) at certain point in time, and apply your own changes to it in the history of the project.&lt;/p&gt;

&lt;h2&gt;Fork&lt;/h2&gt;

&lt;p&gt;What is a fork? It&amp;#8217;s a copy of an original repository (the place where the history of your work is stored) that you can put somewhere else or where you can experiment and apply changes that you can later decide if publishing or not, without affecting your original project.&lt;/p&gt;

&lt;h2&gt;Git Clone&lt;/h2&gt;

&lt;p&gt;What is a clone? It&amp;#8217;s to get a copy of a git project to look at or to use the code.&lt;/p&gt;

&lt;h2&gt;Git Merge&lt;/h2&gt;

&lt;p&gt;What is to merge? It&amp;#8217;s integrating separate changes that you made to a project, on different branches.&lt;/p&gt;

&lt;h2&gt;md: markdown&lt;/h2&gt;

&lt;p&gt;What is markdown? It&amp;#8217;s a plain text format that will make any document easy-to-write and easy-to-read.&lt;/p&gt;

&lt;h2&gt;Push a repository&lt;/h2&gt;

&lt;p&gt;What is to push a repository? It&amp;#8217;s to incorporate a local branch (the independent line of development of a project) to a remote repository (online version of your project).&lt;/p&gt;

&lt;h2&gt;README.md&lt;/h2&gt;

&lt;p&gt;What is a README.md? I&amp;#8217;t a file in a simple format which summarizes a repository. If there&amp;#8217;s also a README (without the .md), the README.md will have priority.&lt;/p&gt;

&lt;h2&gt;SSH (secure shell protocol)&lt;/h2&gt;

&lt;p&gt;What is SSH? It&amp;#8217;s how you call the commands that help communicate through a network and that are encrypted and secure. It&amp;#8217;s used for remote logins and it helps users connect to a server in a secure way.&lt;/p&gt;

&lt;h2&gt;Stage Files&lt;/h2&gt;

&lt;p&gt;What is to stage a file? It&amp;#8217;s how you call the act of preparing a file for a commit (the latest changes of source code in a repository).&lt;/p&gt;

&lt;h2&gt;GitLab&lt;/h2&gt;

&lt;p&gt;What is GitLab? GitLab is an online Git repository manager with a wiki, issue tracking, CI and CD. It is a great way to manage git repositories on a centralized server. GitLab gives you complete control over your repositories or projects and allows you to decide whether they are public or private for free.&lt;/p&gt;

&lt;h3&gt;GitLab.com&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GitLab.com hosts your (private) software projects for free.&lt;/li&gt;
&lt;li&gt;It offers free public and private repositories, issue-tracking and wikis.&lt;/li&gt;
&lt;li&gt;It runs GitLab Enterprise Edition and GitLab CI.&lt;/li&gt;
&lt;li&gt;No installation required, you can just sign up for a free account.
Support Package:&lt;/li&gt;
&lt;li&gt;Free subscribers can use the GitLab.com Support Forum if they have questions.&lt;/li&gt;
&lt;li&gt;GitLab.com Bronze Support will let you email support directly for timely, personal and private answers. This costs $9.99 per user per year for next-business-day response time and is available in packs of 20 users.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GitLab Community Edition (CE)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Free, self hosted application where you can get support from the Community&lt;/li&gt;
&lt;li&gt;Feature rich: Git repository management, code reviews, issue tracking, activity feeds and wikis. It comes with GitLab CI for continuous integration and delivery.&lt;/li&gt;
&lt;li&gt;Open Source: MIT licensed, community driven, 700+ contributors, inspect and modify the source, easy to integrate into your infrastructure.&lt;/li&gt;
&lt;li&gt;Scalable: support 25,000 users on one server or a highly available active/active cluster.&lt;/li&gt;
&lt;li&gt;Merge requests with line-by-line comments, CI and issue tracker integrations.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GitLab Enterprise Edition (EE)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Self hosted application that comes with additional support.&lt;/li&gt;
&lt;li&gt;Builds on top of the Community Edition and includes extra features mainly aimed at organizations with more than 100 users.&lt;/li&gt;
&lt;li&gt;It has LDAP group sync, audit logs and multiple roles.&lt;/li&gt;
&lt;li&gt;It includes deeper authentication and authorization integration, has fine-grained workflow management, has extra server management options and it integrates with your tool stack.&lt;/li&gt;
&lt;li&gt;GitLab EE runs on your servers.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GitLab Continuous Integration (CI)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Free, self hosted application that integrates with GitLab CE/EE. Also availble as SaaS at ci.gitlab.com.&lt;/li&gt;
&lt;li&gt;Easy to set up since it is included in Omnibus packages of GitLab or use it for free on ci.gitlab.com.&lt;/li&gt;
&lt;li&gt;Beautiful interface with a clear menu structure.&lt;/li&gt;
&lt;li&gt;Performant and stable, as tests run distributed on separate machines.&lt;/li&gt;
&lt;li&gt;Will help you receive test results faster with each commit running in parallel on multiple jobs.&lt;/li&gt;
&lt;li&gt;Free to use and completely open source. All CI code is MIT licensed.&lt;/li&gt;
&lt;/ul&gt;


                  &lt;a&gt;&lt;/a&gt;&lt;p&gt;Install GitLab on your own server in 2 minutes &lt;a https: www.gitlab.com downloads id="dl-partial"&gt;Let's do it!&lt;/a&gt; &lt;/p&gt;&lt;a https: www.gitlab.com downloads class="btn btn-block btn-lg btn-purple visible-xs" id="dl-partial-sm"&gt;
  Install GitLab on your own server in 2 minutes
&lt;/a&gt;


                  
                  &lt;p&gt;&amp;#8594; &lt;a https: www.gitlab.com blog archives.html&gt;Browse all posts&lt;/a&gt;&lt;/p&gt;

                  &lt;strong&gt;&lt;a href="https://twitter.com/gitlab"&gt;@gitlab&lt;/a&gt;&lt;/strong&gt;
    on Twitter.

    &lt;a&gt;&lt;/a&gt;&lt;p&gt;For the latest and most detailed news followon Twitter. &lt;a https: www.gitlab.com atom.xml class="rss-btn"&gt;
      
    &lt;/a&gt; &lt;/p&gt;&lt;p&gt;Get every GitLab blog post and stay up to date.&lt;/p&gt;
     
    &lt;p id="mc_embed_signup" class="newsletter-form"&gt;
       
    &lt;/p&gt;
     

  &lt;p id="disqus_thread"&gt;&lt;/p&gt;
                   
                  Please enable JavaScript to view the &amp;lt;a href="http://disqus.com/?ref_noscript"&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;
                &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:simple-words-for-a-gitlab-newbie.html</guid></item><item><title>Student hackathon organizers, join us for Hackcon at GitHub HQ · GitHub</title><link>http://ciandcd.github.io/student-hackathon-organizers-join-us-for-hackcon-at-github-hq-github.html</link><description>From:&lt;a href="https://github.com/blog/2026-student-hackathon-organizers-join-us-for-hackcon-at-github-hq"&gt;https://github.com/blog/2026-student-hackathon-organizers-join-us-for-hackcon-at-github-hq&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;We're hosting &lt;a href="http://hackcon.io"&gt;Hackcon III&lt;/a&gt; at our San Francisco office on July 18th and 19th.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://hackcon.io"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/123345/8124060/1b465136-1110-11e5-8355-d0c5760bf332.png" alt="hackcon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hackcon is the place to be for student hackathon organizers. The event is run by our friends at &lt;a href="http://mlh.io"&gt;Major League Hacking&lt;/a&gt; and will bring together 150 student leaders for two days of talks and workshops. Participants will share experience and best practices in everything from starting a campus group to producing large scale campus events.&lt;/p&gt;

&lt;p&gt;If you lead a student hacker community at your university, we'd love to see you at Hackcon. You can find more information about the event and pre-register at &lt;a href="http://hackcon.io/"&gt;hackcon.io&lt;/a&gt;. You can also check out the videos from &lt;a href="https://www.youtube.com/playlist?list=PLPDgudJ_VDUdqhQldG7SqXGxaj-FiLGmP"&gt;Hackcon I&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?list=PLPDgudJ_VDUfQcMWbEgEsJS270FvfNGFG"&gt;Hackcon II&lt;/a&gt; on YouTube.&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:student-hackathon-organizers-join-us-for-hackcon-at-github-hq-github.html</guid></item><item><title>Support LGBTQ tech organizations with the Pridetocat Shirt · GitHub</title><link>http://ciandcd.github.io/support-lgbtq-tech-organizations-with-the-pridetocat-shirt-github.html</link><description>From:&lt;a href="https://github.com/blog/2016-support-lgbtq-tech-organizations-with-the-pridetocat-shirt"&gt;https://github.com/blog/2016-support-lgbtq-tech-organizations-with-the-pridetocat-shirt&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;With the purchase of the Pridetocat Shirt you will be assisting &lt;a href="http://www.lesbianswhotech.org"&gt;Lesbians Who Tech&lt;/a&gt;,
&lt;a href="http://www.mymaven.org"&gt;Maven&lt;/a&gt;, and &lt;a href="http://www.transhack.org"&gt;Trans*H4CK&lt;/a&gt; to further their work.  All proceeds from sales will be donated to these organizations that are helping educate, connect and empower LGBTQ people in tech.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.myshopify.com/products/pridetocat-shirt"&gt;&lt;img src="https://cloud.githubusercontent.com/assets/5945961/7922248/daa5a220-085f-11e5-88fa-308dfd374aea.jpg" alt="Pridetocat Shirts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This limited edition shirt is available in the &lt;a href="http://github.myshopify.com/"&gt;GitHub Shop&lt;/a&gt; until August 31st.&lt;/p&gt;

&lt;p&gt;More info about the LGBTQ tech organizations that benefit from the purchase of this shirt:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesbians Who Tech&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.lesbianswhotech.org"&gt;Lesbians Who Tech&lt;/a&gt; is a global community of 9,000 queer women in tech. It exists to provide value to queer women in tech, a demographic that is rarely represented in both the tech community and the LGBTQ community. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trans*H4CK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.transhack.org"&gt;Trans*H4CK&lt;/a&gt; is a hackathon and speaker series that tackles social problems by developing new and useful open source tech products that benefit the trans and gender non-conforming communities, while bringing visibility to transgender tech innovators and entrepreneurs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mymaven.org"&gt;Maven&lt;/a&gt; partner with local LGBTQA youth serving organizations and LGBTQA tech professionals to provide free tech camps, workshops, Game Jams/hackathons for the queer youth community.&lt;/p&gt;
  &lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Sat, 23 Jul 2016 05:52:07 +0800</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-23:support-lgbtq-tech-organizations-with-the-pridetocat-shirt-github.html</guid></item><item><title>Fight or Flight Response: Disaster Drones</title><link>http://ciandcd.github.io/fight-or-flight-response-disaster-drones.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160722/fight-or-flight-response-disaster-drones"&gt;https://www.perforce.com/blog/160722/fight-or-flight-response-disaster-drones&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1&gt;The Future of Disaster Relief&amp;#160;&lt;/h1&gt;
&lt;h1&gt;&amp;#8220;We always overestimate the change that will occur in the next two years and underestimate the change that will occur in the next ten. Don&amp;#8217;t let yourself be lulled into inaction.&amp;#8221; &amp;#160;&lt;p&gt;Bill Gates&lt;/p&gt;&lt;/h1&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/4286548059_fbeb65e179_o_CRP-3-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;When we first introduced you to the &lt;a href="https://www.perforce.com/blog/160120/innovation-studio-whole-greater-sum-its-parts"&gt;Innovation Studio&lt;/a&gt; at the College of Alameda, we were teaming up to provide the community&amp;#8217;s young gaming enthusiasts with mentorship and instruction. Most recently, Perforce and the Innovation Studio put technology in the hands of those who need it most.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Natural disasters, armed conflicts, and economic instability threaten humanity&amp;#8217;s survival. It only takes minutes for disaster to strike, but it can take weeks to grapple with the aftermath as the military and other nongovernmental organizations (NGOs) struggle to respond to the needs of those hardest hit.&lt;/p&gt;
&lt;p&gt;In the digital age that is 2016, there is still no standard way to track patients; we rely on toe tagging and permanent markers to track patients as rescue staging care units perform basic medical services from triage to transport and hospital arrival.&lt;/p&gt;
&lt;p&gt;Perforce, the Innovation Studio, and the Navy believe that emerging technology can and should reshape the way we approach disaster response to speed up recovery efforts and reduce loss of life.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Our goal is to get patient data, no matter how voluminous in size &amp;#8212; photos, videos, voice recordings, vital stats &amp;#8212; to the next stage of care with or before the patient&amp;#8217;s arrival so that hospitals can prepare to treat patients as quickly and efficiently as possible. Moreover, this advance has the potential to connect medical experts to rescue workers to offer differential diagnoses or treatments from halfway around the world using our DVCS model and Perforce servers, mobile devices available in the disaster area, ad hoc mesh networks, and drones.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s break it down.&lt;/p&gt;
&lt;p&gt;Ad hoc mesh networks provide basic infrastructure for connectivity during emergency situations by establishing temporary cell towers in drones equipped with cell technology. These drones connect to one another and other hot spots to create the mesh network.&lt;/p&gt;
&lt;p&gt;Distributed Version Control Systems (DVCS) make it easy to update and share files as they move from one person to the next in the field.&lt;/p&gt;
&lt;p&gt;Our experiment consists of collecting and collating patient data with mobile devices such as phones or EKG machines, into a Perforce server, and moving patient data through the mesh network using peer-to-peer Perforce server technology to move a patient&amp;#8217;s data from one DVCS server to another. These DVCS servers can be carried on the drones themselves, or other moving vehicles, including Jeeps and helicopters.&lt;/p&gt;
&lt;p&gt;If our experiments are successful, we will empower more civilians to get involved with NGO humanitarian aid efforts by equipping them with the means to provide better care during the acute phase of disaster relief without requiring specialized military equipment or training.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll be heading back to Camp Roberts from August 8-12 with several other companies from the public and private sectors to continue exploring post-disaster patient data tracking. Read more about our ongoing involvement in the &lt;a href="https://my.nps.edu/documents/104517539/106986340/B-14_JIFX16-3_UbiquitousTechForPatientTracking.pdf/b5e625b9-035a-4397-b08f-a8344ac1ba3b"&gt;JIFX 16-3&lt;/a&gt; experiment.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Fri, 22 Jul 2016 20:57:29 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-22:fight-or-flight-response-disaster-drones.html</guid><category>perforce</category></item><item><title>Helix DVCS - Push Like a Pro</title><link>http://ciandcd.github.io/helix-dvcs-push-like-a-pro.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160718/helix-dvcs-push-pro"&gt;https://www.perforce.com/blog/160718/helix-dvcs-push-pro&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1&gt;Helix DVCS &amp;#8211; Push Like a Pro&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/DVCSarticleimage.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This post was a long time coming, but we are a bit busy at the moment. Nevertheless: if you read my previous posts on DVCS, you are probably curious how to push your changes to a remote server.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Push&lt;/h2&gt;
&lt;p&gt;You should all have successfully created local servers by now, either through an init or a clone. It is time to share your magnum opus with the rest of the world.&lt;/p&gt;
&lt;pre&gt;            p4 push&lt;/pre&gt;&lt;p&gt;There! That wasn&amp;#8217;t that hard, was it?&lt;/p&gt;
&lt;p&gt;Yes, I admit, there is a lot more magic going on in the background to make sure this command works as simple as that. So let&amp;#8217;s review the settings to guarantee success.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;First of all, your local server must have matching case sensitivity and Unicode settings to be able to push to another Helix server. If you cloned from that server you are fine, but if you initialised your independent copy first, you should use the &amp;#8220;-p&amp;#8221; option to extract the settings from the target or specify them by hand. Reread the &amp;#8220;&lt;a href="https://www.perforce.com/blog/150610/helix-dvcs-initialization-tips-tricks"&gt;initialise like a pro&lt;/a&gt;&amp;#8221; post if you are unsure.&lt;/p&gt;
&lt;p&gt;You also have to have permission to push your changes and the target has to be configured to accept your changes (&amp;#8220;&lt;a href="https://www.perforce.com/blog/151111/helix-dvcs-administer-pro"&gt;administer like a pro&lt;/a&gt;&amp;#8221; post).&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Remote spec&lt;/h2&gt;
&lt;p&gt;You need to have a remote spec with the name &amp;#8220;origin&amp;#8221; defined that maps your local files to the correct location on the target server. If you cloned your repository, this remote will have been created for you automatically, otherwise you need to set up this remote.&lt;/p&gt;
&lt;p&gt;If you remote is not called &amp;#8220;origin&amp;#8221;, or if you want to push to a different server, you need to specify the remote explicitly.&lt;/p&gt;
&lt;pre&gt;            p4 push &amp;#8211;r &amp;lt;remote-name&amp;gt;&lt;/pre&gt;&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Remote user&lt;/h2&gt;
&lt;p&gt;You need to be logged into the remote server, that is, have a valid ticket. If you remember the discussion about users in remote servers from the &amp;#8220;&lt;a href="https://www.perforce.com/blog/150610/helix-dvcs-initialization-tips-tricks"&gt;initialise&lt;/a&gt;&amp;#8221; post, you know that your local user and your remote user do not have to coincide. Since my original post, the remote spec has picked up a new field: remoteUser.&lt;/p&gt;
&lt;p&gt;In my case, if I want to push anything into the workshop, I tend to do that under the user &amp;#8220;sven_erik_knop&amp;#8221;, while my local user is &amp;#8220;sknop&amp;#8221;. Now I simply update my remote spec (&amp;#8220;p4 remote origin&amp;#8221; or &amp;#8220;p4 remote &amp;lt;remote spec&amp;gt;&amp;#8221;) and set &amp;#8220;RemoteUser: sven_erik_knop&amp;#8221; and login to the remote server with&lt;/p&gt;
&lt;pre&gt;p4 login &amp;#8211;r &amp;lt;remote-spec&amp;gt;&lt;/pre&gt;&lt;p&gt;If you are using 2016.1 P4 and P4D, you may have noticed a new feature: if you do not have a valid ticket, then P4 will prompt you for a password automatically when you issue a command; after successful authentication, P4 will proceed immediately.&amp;#160; This is very handy when pushing to a remote server &amp;#8211; no need for a separate login.&lt;/p&gt;
&lt;p&gt;A push can fail if you have changes waiting for you in the target codeline on the remote server. In that case, you will need to fetch and potentially merge those changes first; but this is a topic for the next post.&lt;/p&gt;
&lt;p&gt;Finally, your push is not permitted if you have unsubmitted changes in your server. This can happen because you forgot to submit your local changes &amp;#8211; or because you need to run a resubmit because of a previous unsubmit &amp;#8211; also a topic for a separate post.&lt;/p&gt;
&lt;p&gt;If all these prerequisites are met, the push command will (finally) succeed as planned.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Details on push&lt;/h2&gt;
&lt;p&gt;What is it we are actually pushing? How do we know which changes need to be pushed and what happens to the change numbers themselves? And what about integrations, attributes, labels and fixes?&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s look at these questions a little more in detail.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;What is it we are actually pushing?&lt;/h2&gt;
&lt;p&gt;When you run &amp;#8216;p4 push&amp;#8217;, you will push changes, revisions and archives, together with potential integration records, attributes and job fixes. As part of a change, the user name, server id (recorded as the client workspace name), timestamps and of course the description are pushed to the remote server.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;How do we know what to push?&lt;/h2&gt;
&lt;p&gt;Have a look at your remote spec. It contains the fields &amp;#8220;LastFetch&amp;#8221; and &amp;#8220;LastPush&amp;#8221;, both of which either contain the word &amp;#8220;default&amp;#8221; or a change number. LastFetch contains the last change you pulled down from the remote server (more about this in the next post), LastPush is the last local change you have pushed to that remote server.&lt;/p&gt;
&lt;p&gt;Determining what needs to be pushed is then simply a matter of comparing the latest change number with LastPush, and transmitting all changes not previously pushed.&lt;/p&gt;
&lt;p&gt;If you run &amp;#8216;p4 help push&amp;#8217; you can see that there a couple of interesting options for this command. You can push individual streams (remember that local DVCS servers are always stream based, even if the remote server is not). You can push individual changes and even individual files.&lt;/p&gt;
&lt;p&gt;In both cases, the LastPush field does not get updated. Instead, push will determine which changes have already made it to the remote and ignore these changes. Only when all changes are pushed up does the local server update the field as well.&lt;/p&gt;
&lt;p&gt;If you want to know more details about which changes are pushed and which are ignored, run the push command with the verbose (-v) option. This option will also give you details about the resources consumed for the push:&lt;/p&gt;
&lt;pre&gt;Change 1840 was already present in the target repository.

Change 1841 imported as change 101354.

Resource usage: qry/zip/db/arch/fin/tot=4ms/0ms/7ms+1.1K/13ms+22B/8ms/34ms&lt;/pre&gt;&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;What happens to the change numbers?&lt;/h2&gt;
&lt;p&gt;The output for the change 1841 was interesting: the change was imported as change 101354. What is going on here?&lt;/p&gt;
&lt;p&gt;The point about DVCS is that you are normally not connected to the remote server, sitting in a plane or on a train instead. So local change numbers and change numbers on the remote server will diverge (remember that in Perforce Helix change numbers are strictly monotonic increasing).&lt;/p&gt;
&lt;p&gt;When I push a change from my local server to the remote server, the change will usually be renumbered. This is similar to Mercurial (which locally uses strictly monotonic increasing changes as well) but quite different from Git, which insists on SHA hash numbers as a globally unique identifier of a change. This does not make sense for Perforce Helix &amp;#8211; since I can push part of a change or individual files, the SHA has no meaning.&lt;/p&gt;
&lt;p&gt;Nonetheless, there is a way to link a remote change to a local change, by setting a local configurable: submit.identity.&lt;/p&gt;
&lt;p&gt;This configurable can be set to one of three different strategies:&lt;/p&gt;
&lt;h3&gt;&amp;#160;&lt;/h3&gt;
&lt;h3&gt;UUID&lt;/h3&gt;
&lt;p&gt;A unique identifier created as a random number (it is a type 4 UUID). The UUID is created using a small, fast pseudo-random number generator (PRNG), which guarantees uniqueness to a high degree but is not necessarily sufficient for cryptography.&lt;/p&gt;
&lt;h3&gt;Checksum&lt;/h3&gt;
&lt;p&gt;This is an MD5 checksum hashed over the details of the change, including depot path, timestamp, content and revision of each file in the change, so two users submitting identical files with identical content will still get different checksums.&lt;/p&gt;
&lt;h3&gt;Serverid&lt;/h3&gt;
&lt;p&gt;This is a concatenation of your local server.id (that is, typically your local workspace name) and your local change number.&lt;/p&gt;
&lt;p&gt;The change identity is stored in your local change in the field Identity, which will be pushed to the remote server.&lt;/p&gt;
&lt;p&gt;You can use the command &amp;#8220;p4 describe &amp;#8211;I &amp;lt;identity&amp;gt;&amp;#8221; to find a change with a given identity.&lt;/p&gt;
&lt;p&gt;Which strategy you use is up to you. Why don&amp;#8217;t you let us know which option is most useful to you?&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;What happens to integrations?&lt;/h2&gt;
&lt;p&gt;Just like in the &amp;#8216;p4 clone&amp;#8217; case, integrations within the view of a remote spec are pushed. To preserve integrations between streams, make sure to map source and target stream in your remote spec.&lt;/p&gt;
&lt;p&gt;If one-half of the integration is not mapped, the integration will be downgraded to add/edit/delete in the remote server upon push.&lt;/p&gt;
&lt;p&gt;Most importantly, renames within a stream are preserved when pushed.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;How about attributes?&lt;/h2&gt;
&lt;p&gt;Since 2015.2 attributes set against a file revision on your local server will be pushed to the remote server, but only if that server is at least at 2015.2 as well (otherwise attributes will be silently ignored).&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;And fixes?&lt;/h2&gt;
&lt;p&gt;Yes, you can push fixes (links between jobs and changes) as well, but you need to copy the jobspec and the individual jobs across to the local server before you can do so. This is an exercise best left to the advanced user (and maybe subject to another post&amp;#160;if you so wish).&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;What about labels?&lt;/h2&gt;
&lt;p&gt;Err. No.&lt;/p&gt;
&lt;p&gt;Keep in mind that Perforce Helix is different to your usual DVCS setup. The central usually has many projects in different paths to your local server, so translation of static labels is difficult. Automatic labels can be easily recreated on the remote server, though.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Triggers and push&lt;/h2&gt;
&lt;p&gt;There are triggers on the remote site that can fire when changes are pushed in, and these triggers will have to be used instead of the usual submit triggers to enforce policy. I&amp;#8217;ll cover the details in a separate post.&lt;/p&gt;
&lt;h2&gt;&amp;#160;&lt;/h2&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A simple push is very easy, but the devil is, as usual, in the details. I hope this post gives you an idea of the preparation stages and the result of a push.&lt;/p&gt;
&lt;p&gt;As usual, tweet feedback to @p4sven, please.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">About The Author</dc:creator><pubDate>Mon, 18 Jul 2016 17:43:46 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-18:helix-dvcs-push-like-a-pro.html</guid><category>perforce</category></item><item><title>Perforce Hires Its First Chief Product Officer</title><link>http://ciandcd.github.io/perforce-hires-its-first-chief-product-officer.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160706/perforce-hires-its-first-chief-product-officer"&gt;https://www.perforce.com/blog/160706/perforce-hires-its-first-chief-product-officer&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;As we continue to look for new ways to provide greater value for our customers, we&amp;#8217;re excited to welcome our first Chief Product Officer ever, Tim Russell, to spearhead initiatives to expand our solutions that automate and protect the technology innovation and delivery lifecycle.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Tim joins us with extensive experience leading technology teams in high-growth software companies, including NetApp, SafeNet, and Secure Computing. Most recently, he was Vice President of Product Management for NetApp&amp;#8217;s Data Fabric Group where he led the definition and engineering of customer solutions for data center, cloud, and hybrid cloud data management.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Read the &lt;a href="http://www.prnewswire.com/news-releases/perforce-names-tim-russell-as-chief-product-officer-300291778.html"&gt;full press release here&lt;/a&gt;&amp;#160; to learn more about Tim and hear what Janet Dryer, CEO, has to say.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">About The Author</dc:creator><pubDate>Wed, 06 Jul 2016 22:49:01 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-06:perforce-hires-its-first-chief-product-officer.html</guid><category>perforce</category></item><item><title>Take a DevOps Road Trip with Scania</title><link>http://ciandcd.github.io/take-a-devops-road-trip-with-scania.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160706/take-devops-road-trip-scania"&gt;https://www.perforce.com/blog/160706/take-devops-road-trip-scania&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/scania_lp_bg.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s nothing quite like standing at the top of a mountain, miles from where your journey started, thinking back at all you&amp;#8217;ve accomplished to get there.&lt;/p&gt;
&lt;p&gt;But long road trips in cramped cars during the sweltering summer months can quickly get bumpy. Backseat passengers start bickering over leg room and imaginary lines that mustn&amp;#8217;t be crossed. Front seat passengers frantically try to decipher which exit the GPS really wants them take.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a lot like trying to implement a successful DevOps cultural transformation across an entire global enterprise. It might be tempting to just go, but without a plan, unexpected roadblocks could mean returning to your silo-ed homelands with nothing to show for your troubles.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Scania: Adopting DevOps for Auto Production&amp;#8221; explores the DevOps journey of Scania, one of the world&amp;#8217;s leading manufacturer&amp;#8217;s of trucks for heavy transportation vehicles, as it went from three painful releases a year to deploying successfully several times a day by using Perforce Helix as the focal point of its continuous integration environment and processes.&lt;/p&gt;
&lt;p&gt;Set a few checkpoints of your own and get your DevOps compass pointed in the right direction.&lt;/p&gt;
&lt;p&gt;Buckle up and enjoy the ride by clicking &lt;a href="http://devops.com/2016/06/28/scania-adopting-devops-auto-production/"&gt;here&lt;/a&gt;!&amp;#160;&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">About The Author</dc:creator><pubDate>Wed, 06 Jul 2016 22:44:31 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-06:take-a-devops-road-trip-with-scania.html</guid><category>perforce</category></item><item><title>Streams in Parallel Development</title><link>http://ciandcd.github.io/streams-in-parallel-development.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160701/streams-parallel-development"&gt;https://www.perforce.com/blog/160701/streams-parallel-development&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/devtalk_blog2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This week, we took a look at Perforce Streams and the many updates that have been implemented to make your project manager&amp;#8217;s lives easier when managing streams in parallel development. Our presenter Sven Erik Knop, Technical Marketing Manager at Perforce, dove into the details around making these updates work for you and your team and also answered questions from the audience.&lt;/p&gt;
&lt;p&gt;Here are two questions that we thought would be beneficial to our readership&amp;#160;as answered by Sven Knop:&lt;/p&gt;
&lt;h2&gt;
	How are streams used in continuous integration?&lt;/h2&gt;
&lt;p&gt;Each stream, be it mainline, release or development stream, will be fed into the continuous integration engine (CI) to be built automatically. Streams can be discovered programmatically to generate build scripts automatically as well to ensure that any release and development branch is covered by the CI server.&lt;/p&gt;
&lt;p&gt;It is also reasonably easy to automate the process of propagating the changes between streams via a review process using shelves that will be picked up by the CI server as well.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h2&gt;Can a depot be used by the conventional P4 as well as streams?&lt;/h2&gt;
&lt;p&gt;Yes, for read-only purposes. You can point a "classical" client workspace (we call these "unmanaged" workspaces) to a depot path within a streams depot and sync files to your workspace, but you cannot check these files out and submit them outside of a streams workspace.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Missed the presentation? No worries, there are two ways that you can get the latest on Perforce Streams. &lt;a href="http://info.perforce.com/ondemand-webinar-streams-in-parallel-development.html?utm_source="&gt;Register for our on-demand viewing&lt;/a&gt; and watch on your own time, or you can join us at Perforce on Tour 2016 where we&amp;#8217;ll revisit Streams for our live audience. Not only will you get a chance to catch up on what you missed at our latest DevTalk, but why not take this opportunity to discover why 1/3 of the earth's population now uses software developed on Perforce Helix to achieve DevOps harmony?&amp;#160;&lt;/p&gt;
&lt;p&gt;Curious to learn more? &lt;a href="http://info.perforce.com/Perforce-on-Tour-2016.html"&gt;Join us for Perforce on Tour 2016&lt;/a&gt; in London and Berlin:&lt;/p&gt;
&lt;p&gt;
	London, UK - Thursday&amp;#160;22 September, 2016&amp;#160;at CodeNode&lt;/p&gt;
&lt;p&gt;	Berlin, Germany - Thursday&amp;#160;29 September, 2016&amp;#160;at Hotel Sofitel Berlin Gendarmenmar&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Fri, 01 Jul 2016 19:08:56 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-07-01:streams-in-parallel-development.html</guid><category>perforce</category></item><item><title>Your Questions Answered</title><link>http://ciandcd.github.io/your-questions-answered.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160620/questions-answered"&gt;https://www.perforce.com/blog/160620/questions-answered&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h1&gt;The Changing Role of Release Engineering in a DevOps World&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/DevOpsElephant.png"&gt;&lt;/p&gt;
&lt;p&gt;Here at Perforce, DevOps expert J. Paul Reed recently joined us for a broadcast on &lt;a href="http://info.perforce.com/ondemand-webinar-release-engineering-devops.html?utm_source="&gt;the changing role of Release Engineering in the word of DevOps&lt;/a&gt;. In this 30-minute webinar, Paul dove into topics such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How release engineering and DevOps intersect&lt;/li&gt;
&lt;li&gt;What DevOps and Continuous Delivery mean for the future of release engineering&lt;/li&gt;
&lt;li&gt;Tips for grappling with release engineering in a DevOps world&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We had a great audience for our live broadcast and received some insightful questions from our viewers. Here are a few of our favorite live questions answered by DevOps consultant J. Paul Reed.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;h2&gt;Where do you see release engineering in 10 years?&lt;/h2&gt;
&lt;p&gt;In 2026, everything will be based on server-less architectures, meaning we can get rid of all those pesky operations and release engineers.&lt;/p&gt;
&lt;p&gt;	No, but seriously: I think the work currently associated with "release engineering" may start to be called something else, especially as we attempt to "continuous delivery" everything; but the work will be very similar, and in fact, as the Internet-of-Things heats up, I think the entire industry is in for a rude awakening when they realize that the web, in many ways, has coddled us such that we could mostly ignore all of the release engineering discipline and everything would still be "mostly OK." (And easily fixable, if not!)&lt;/p&gt;
&lt;p&gt;	Of course, us release engineers know that companies made their lives harder by doing so, but when you start shipping software to your toaster and your pacemaker and your electric car, suddenly, all those considerations around the mechanics of release software become incredibly important again.&lt;/p&gt;
&lt;p&gt;	So in that regard, I wouldn&amp;#8217;t be surprised if we experience a bit of a renaissance in release engineering; what remains to be seen is whether the industry will look backward 10 years to the lessons we've already learned, or do what it usually does, and try to re-learn everything from first principles again and, of course, with the pain, gnashing of teeth, and customer-affecting failure that comes with that.&lt;br&gt;
	&amp;#160;&lt;/p&gt;
&lt;h2&gt;Can DevOps succeed without a centralized enterprise DevOps team?&lt;/h2&gt;
&lt;p&gt;Most certainly!&lt;/p&gt;
&lt;p&gt;In fact, many would say a "centralized enterprise DevOps team" is an anti-pattern. In large enterprises, I have seen the creation of centralized DevOps teams (or even worse: a "DevOps Center of Excellence") and it tends to be fraught with all sorts of problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It&amp;#8217;s yet another team: one of the problems DevOps tries to solve is the siloed nature of development and operations teams; but when you create another team in between these teams, that's just another team to manage, with additional complexities to address. And it doesn't solve the original silo problem.&lt;/li&gt;
&lt;li&gt;There's been much discussion recently of the problems with &amp;#8220;bi-modal IT," the idea that there's "one speed" for "legacy" IT, and the shiny, new DevOps way is another mode. This has a tendency to engender all sorts of animosity between the teams responsible for the "two modes" of IT, and a centralized DevOps team is likely to promote this separation, which is starting to be widely recognized as problematic.&lt;/li&gt;
&lt;li&gt;Lastly, a centralized DevOps team doesn't allow local development and operations teams to experiment, communicate, learn, wrestle with, and work in their local contexts, precisely where it would be most valuable. On the contrary, it restricts such behavior.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
	That's not to say if you have one of these teams, you're "doing it wrong" or it's going to be horrible. But I would say: a centralized DevOps team does &lt;strong&gt;not&lt;/strong&gt; guarantee success, and in fact, in many ways, may impede it.&lt;br&gt;
	&amp;#160;&lt;/p&gt;
&lt;h2&gt;Is Docker better than VM technology for DevOps? In a test environment? Is this the future?&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a lot of hype around Docker right now, and because of that there is confusion around what it's good for, what it isn't good for, and how it can best be leveraged in real-world environments.&lt;/p&gt;
&lt;p&gt;	A tweet I saw just the other day was from an engineer with a fair amount of Docker experience; she asked the audience she was presenting to "Who's using Docker?" and noted that many hands went up. She then added "... in production": the hands all went down.&lt;/p&gt;
&lt;p&gt;	There's a fair amount of management and infrastructure tooling that's currently missing in Docker-land; I think they're working hard and fast on fixing that, but that's also why you get a fairly wide range of "Docker usage stories.&amp;#8221; For some users, the tools they need to manage at scale (in or out of production) simply aren't there. They either have to build them, or abandon Docker.&lt;/p&gt;
&lt;p&gt;	Ultimately, Docker as a way to coordinate developers' environments is a great use case, and it's the one I commonly see. I don't believe Docker solves all the problems that virtualization solved and it doesn't solve all the problems that configuration management solves. But it does solve a problem, and the best Docker rollouts are those that use Docker for certain solutions, but can still produce VMs, or AMIs, or other operable artifacts that are not Docker containers.&lt;/p&gt;
&lt;p&gt;	For more discussion on some of the concerns of rolling out Docker in an environment, read my good friend Julian Dunn's blog post: &lt;a href="http://www.juliandunn.net/2015/12/04/the-oncoming-train-of-enterprise-container-deployments/"&gt;The Oncoming Train of Enterprise Container Deployments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;For additional DevOps best practices, download J. Paul&amp;#8217;s publication by O&amp;#8217;Reilly media &amp;#8220;&lt;a href="http://jpaulreed.com/devops-in-practice"&gt;DevOps in Practice&lt;/a&gt;&amp;#8221;, and for more webcasts on hot topics please visit &lt;a href="https://www.perforce.com/events"&gt;perforce.com/events&lt;/a&gt; to register for upcoming webinars.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Mon, 20 Jun 2016 18:36:48 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-06-20:your-questions-answered.html</guid><category>perforce</category></item><item><title>I Test, You Test</title><link>http://ciandcd.github.io/i-test-you-test.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160617/i-test-you-test"&gt;https://www.perforce.com/blog/160617/i-test-you-test&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;In a previous blog post, I briefly mentioned the fact that as customers reported problems with the old v2 engine, these cases were logged in the form of detailed test cases.&amp;#160; More than one customer has asked how we test the integration logic, so I thought this might be a good opportunity to go into the integration test harness I use, "itest", in a little more detail.&lt;/p&gt;
&lt;p&gt;I first became involved in the problem of how to test our integration logic when I was in technical support, serving as the main point of contact for any customer encountering problems with integration.&amp;#160; When customers encountered problems that didn't have workarounds, I would attempt to advocate for specific fixes; sometimes in the form of small tweaks that would solve a particular problem, sometimes in the form of more fundamental changes that seemed like the only way to solve the more fundamental problems.&amp;#160; Development was hesitant to attempt to implement any of these suggestions, largely because even if they were good suggestions (and one or two of them might have been), it would be difficult to verify their efficacy.&lt;/p&gt;
&lt;p&gt;Before itest existed, the body of tests for integration (and everything else) worked by running a large set of commands and diffing the output vs a large set of canonical output.&amp;#160; Adding a new test in the middle of this suite and making sure all of the tests that followed it still functioned correctly could be nontrivial.&amp;#160; Testing the semantic effect of a change that touched a large number of systems could also be nontrivial -- if a low-level change caused a set of commands to produce functionally the same result but with a different number of changelists, or selecting a different (but identical) revision as a base, the entire test would "fail" and a large amount of human effort would be needed to see whether the change worked as intended in all of those cases.&lt;/p&gt;
&lt;p&gt;Add into this state of affairs the situation when we did make a few fundamental changes to the v2 algorithm and customers began to report behavioral differences.&amp;#160; The changes in question are described in this 2007.2 relnote:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;        #119955 (Bug #23698, #24251, #24207, #23469, #24150) **

            The 'p4 integrate' algorithms for suppressing reintegration

            and for picking the optimum base, which were reimplemented

            in 2006.1, have been tuned significantly for this release.

            The following new changes have been made:


            Integrating a single 'copy from' revision now gives credit for

            all earlier revisions, so that a subsequent 'p4 integrate' of

            any earlier revision will find no work to do.  This can only

            come about by 'cherry picking' (providing to 'p4 integrate'

            specific revisions to integrate).


            Pending integration records (files opened with 'p4 integrate'

            but not yet submitted with 'p4 submit') are now considered

            when finding the most appropriate base.  This makes

            integrating into a related file already opened for branch

            possible without the 'p4 integrate -i' flag.


            'p4 integrate' follows indirect integrations through

            complicated combinations of merge/copy/ignore integration

            records better.  This should result in fewer integrations

            being scheduled, and closer bases being picked, for

            integration between distant files.


            'p4 integrate' could wrongly choose a base on the source

            file after the revisions needing to be integrated if the

            revisions needing to be integrated were before revisions

            already integrated.  This normally only comes about in cases

            of 'cherry picking' (providing to 'p4 integrate' specific

            revisions to integrate).

            

            'p4 integrate' in certain cases wouldn't find a base (or

            choose a poorer base) if the source file was branched and

            reopened for add, and then the original file was changed

            further and branched again.&lt;/pre&gt;&lt;p&gt;As customers reported that merges in some cases had become more difficult after the upgrade to 2007.2, I wanted to get hard data to determine if there had been a verifiable regression in behavior and possibly make a case to development to roll some of the changes back, so I got a lot of practice at looking at the data I had available (mostly screenshots of Revision Graph) and coming up with sets of commands that would reconstruct the same scenario -- rather than logging a bug report that said "some merges are different after the upgrade", or including a full customer checkpoint as an attachment, I had something that development could simply copy and paste into a shell to recreate the situation that the customer was experiencing.&lt;/p&gt;
&lt;p&gt;I started writing the itest.pl test suite while I was on the long flight back from the 2008 European User Conference; we had just had a long conversation about the possibility of making deep changes to the integration algorithm to cut down on conflicts, and the problem had come up of not having adequate test data to verify that sort of a deep change.&amp;#160; The following requirements were foremost in my mind:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#183;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; It needed to be easier for me to generate test cases than my then-current method of typing out individual shell commands.&lt;/p&gt;
&lt;p&gt;&amp;#183;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; The tests needed to be able to check for semantic correctness rather than relying on byte-for-byte equality of output.&lt;/p&gt;
&lt;p&gt;&amp;#183;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; I needed to be able to easily run the same set of tests in different environments to report on differences between versions.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;The script started with a simple method to generate text files with a sequence of non-conflicting edits that I could use to arbitrarily produce clean merges at will (try doing that in a simple batch script with "echo" statements and redirects; it's torment), and quickly evolved into a language that was able to represent everything in my library of batch scripts with a very small fraction of the typing.&amp;#160; This is an example of a test script written using the itest tool:&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;pre&gt;add X

branch X Z

branch X Y

edit X 1 B1

edit Y 1 B2

edit Z 2 D

dirty Y X 1 B3

merge Z Y

merge Z X

test base X Y Y#3 Y#2 Z#2 X#1&lt;/pre&gt;&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;In English this would read as: "add a file called X, create branches Z and Y, edit different text into X and Y at a common location to force a conflict, and something else into Z at a non-conflicting location.&amp;#160; Do a dirty merge from Y to X, resolving the conflict with yet another edit in the same location, and then do clean merges from Z to both Y and X.&amp;#160; When merging from X to Y, the ideal base is Y#3, with other acceptable (but not ideal) bases being, from best to worst: Y#2, Z#2, and X#1."&amp;#160; When executing this script, the output will be a letter grade from A (for the ideal base being chosen) to F (for none of the presented options being chosen).&amp;#160; The 2006.1 server receives a grade of "C" on this test; the server as of 2013.2 receives an "A".&lt;/p&gt;
&lt;p&gt;Once I had migrated all of my existing test cases into this tool, I was able to very quickly create a table (with color coding and everything) demonstrating differences in behavior between releases -- cases where 2006.1 was a regression from 2005.2, and cases where 2007.2 was a regression from 2006.2, as well as cases where the newer release was a step forward.&amp;#160; As time went on, I continued adding more and more data to this test suite, and slowly started to assemble a picture of what an algorithm that addressed every case at once might look like.&amp;#160; Having so many examples of cases that could "fool" each existing approach into picking a demonstrably non-optimal answer made it much easier to think about what approach we could use to produce an optimal answer in each instance.&lt;/p&gt;
&lt;p&gt;These examples also served me very well when I began work on a prototype for a system that I thought might produce that optimal answer; once my prototype was able to produce right answers to everything that the current software got wrong, it was easy to make a case to development that it was worth working to improve or rewrite what we had.&amp;#160; A few years later, I myself had been absorbed into development to take over that task, and I hope this serves as a cautionary tale to others about the dangers of writing demonstrably useful prototypes, even just for fun.&lt;/p&gt;
&lt;p&gt;Here's an example of a table of test output, with the same set of tests run across three different server versions:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/ITest.png"&gt;&lt;/p&gt;
&lt;p&gt;The current version of &lt;a href="https://swarm.workshop.perforce.com/files/guest/sam_stafford/scripts/itest.pl"&gt;itest.pl can be found in the Workshop&lt;/a&gt;.&amp;#160; Some time ago I decided to put it out there so that customers who were experiencing problems with integration and wanted to document those cases for themselves, the same way that I used to when I was working directly with customers, would have access to the same tool that I used.&lt;/p&gt;
&lt;p&gt;More recently I've submitted a selection of the &lt;a href="https://swarm.workshop.perforce.com/files/guest/sam_stafford/scripts/itest.txt"&gt;test cases&lt;/a&gt; that we have assembled over the years.&amp;#160; This isn't the full suite (I've removed a large number of cases that are based directly on customer data, leaving only the more abstract cases) but hopefully it provides an idea of the breadth of situations that we test and develop for.&lt;/p&gt;
&lt;p&gt;As promised in my last post, I will soon be getting to a description of the current integration engine, which is based heavily on the prototype I mentioned in this post.&amp;#160; Stay tuned!&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">About The Author</dc:creator><pubDate>Fri, 17 Jun 2016 20:42:08 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-06-17:i-test-you-test.html</guid><category>perforce</category></item><item><title>OOO (Out of Office)...</title><link>http://ciandcd.github.io/ooo-out-of-office.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160607/ooo-out-office"&gt;https://www.perforce.com/blog/160607/ooo-out-office&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;Ever looked into someone&amp;#8217;s calendar and see the OOO message &amp;#8211; and wondered where they were? Well, here are some of the places we (Paul Allen, Senior Integration Engineer at Perforce and Sven Erik Knop, Senior Technical Specialist at Perforce) ended up on our visits to the Alameda office in California. Having explored downtown San Francisco to&amp;#160;excess, we decided to expand our horizon and explore the national parks in California.&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/map.png"&gt;&lt;/p&gt;
&lt;h3&gt;Mt. Shasta&lt;/h3&gt;
&lt;p&gt;First on the list was the big daddy, Mt. Shasta, a volcano that at 4,322 m (14,179 feet)&amp;#160;feet stands out like a sore thumb in the landscape of Northern California, 5 hours north of San&amp;#160;Francisco. It was the beginning of June and, this being California, we expected to be able to stroll up the mountain in shorts and T-Shirts.&lt;/p&gt;
&lt;p&gt;Or not.&lt;/p&gt;
&lt;p&gt;Turns out we were greeted with 2 meters (7 feet)&amp;#160;of snow at the trail base. Thankfully we were paranoid enough to bring our snow gear, rented crampons and set off.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/paulinsnow.png"&gt;&lt;/p&gt;
&lt;p&gt;We did not make it quite to the top, a blizzard with gale-force winds blowing down the mountain finally forced us down an hour from the summit, but we had a great day out anyway.&lt;/p&gt;
&lt;h3&gt;Lake Tahoe&lt;/h3&gt;
&lt;p&gt;Two years later, we decided to take an easier route and travel to Lake Tahoe instead. Wanting to maximize our weekend, we drove straight up after landing at SFO. Since both of us live in the UK (time difference of 8 hours), when we arrived at midnight, our body clocks insisted it was 8am in the morning. Not the best start for what turned out to be a more difficult hike than anticipated.&lt;/p&gt;
&lt;p&gt;See, if you hike with Paul, snow is always an option, even if it does not look this way to begin with.&lt;/p&gt;
&lt;p&gt;Still, the scenery rewarded us for the efforts of an 8-hour hike. We completed the trip the next day with a nice (and gentle) bike ride along the lake.&lt;/p&gt;
&lt;h3&gt;Yosemite&lt;/h3&gt;
&lt;p&gt;The next year I put my foot down: no more snow. Instead, we were joined by our colleague Jason Novecosky, Director of BC Operations at Perforce from our Canadian office, and we decided to travel down to the famous Yosemite National Park in the Sierra Nevada mountain&amp;#160;and were greeted with spectacular views.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/trioinyosemite.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/yosemite.png"&gt;&lt;/p&gt;
&lt;h3&gt;Lassen Volcanic&lt;/h3&gt;
&lt;p&gt;The &amp;#8220;failure&amp;#8221; of reaching the summit of Mt. Shasta wouldn&amp;#8217;t let us rest- we wanted to reach the top of a volcano. So we set our sights on a slightly smaller mountain: Lassen Peak in the Lassen Volcanic National Park. At 3,189 m (10,457 feet) this was considerably less challenging than Mt. Shasta and was also in a much more forgiving environment with respect to the weather, but there were a lot of forest fires.&lt;/p&gt;
&lt;p&gt;We were told that we would not see a thing if we climbed up the peak because of the smoke. Turns out the advice was wrong- we had some spectacular views again.&lt;/p&gt;
&lt;p&gt;On the way back to San Francisco we drove to the coast, now through thick smoke and haze due to the fires on our visit the redwoods (the tallest trees in the world). If you have a list of incredible drives that you want to take in your life, add the Avenue of the Giants. Simpy mind-boggling.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/volacanic.png"&gt;&lt;/p&gt;
&lt;h3&gt;Sequoia&lt;/h3&gt;
&lt;p&gt;Redwood trees are great (literally) but compared to Sequoia trees they seem tiny. Sequoia trees are the largest trees (by volume) in the world, and the best place to see them is in the Sequoia National Park (5 hours south of San Francisco), also in the Sierra Nevada mountain range. They did promise us snow again (thanks, Paul) but in the end, it turned out to be just rain and fog.&lt;/p&gt;
&lt;p&gt;We ended up being unable to see many of the views, but we did see some very big trees.&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/sites/default/files/sequoia2.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Next trip?&lt;/h3&gt;
&lt;p&gt;We only just scratched the surface of the fantastic outdoors California has to offer. If you have any comments about our trips or if you have any suggestions where to go next, give us a shout at @p4sven or @pallen_tweet.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">About The Author</dc:creator><pubDate>Tue, 07 Jun 2016 20:28:20 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-06-07:ooo-out-of-office.html</guid><category>perforce</category></item><item><title>What Are Your Options for a High Availability and Disaster Recovery Plan</title><link>http://ciandcd.github.io/what-are-your-options-for-a-high-availability-and-disaster-recovery-plan.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160602/what-are-options-high-availability-disaster-recovery-plan"&gt;https://www.perforce.com/blog/160602/what-are-options-high-availability-disaster-recovery-plan&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;p&gt;&lt;img alt="" src="/sites/default/files/DisasterRecovery_thumb.png"&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;There&amp;#160;are&amp;#160;a&amp;#160;lot&amp;#160;of&amp;#160;things&amp;#160;to&amp;#160;consider&amp;#160;when&amp;#160;planning&amp;#160;an&amp;#160;enterprise&amp;#160;Perforce&amp;#160;server&amp;#160; deployment.&amp;#160;Two&amp;#160;of&amp;#160;those&amp;#160;include&amp;#160;High&amp;#160;Availability&amp;#160;and&amp;#160;Disaster&amp;#160;Recovery.&lt;/p&gt;
&lt;p&gt;When&amp;#160;you&amp;#160;think&amp;#160;about&amp;#160;your&amp;#160;servers&amp;#160;going&amp;#160;down,&amp;#160;your&amp;#160;first&amp;#160;instinct&amp;#160;is&amp;#160;probably&amp;#160;to&amp;#160; think&amp;#160;about&amp;#160;how&amp;#160;lost&amp;#160;or&amp;#160;corrupted&amp;#160;data&amp;#160;will&amp;#160;be&amp;#160;recovered.&amp;#160;But&amp;#160;before&amp;#160;you&amp;#160;even&amp;#160; begin&amp;#160;to&amp;#160;think&amp;#160;about&amp;#160;losing&amp;#160;data,&amp;#160;you&amp;#160;should&amp;#160;think&amp;#160;about&amp;#160;putting&amp;#160;a&amp;#160;plan&amp;#160;in&amp;#160;place&amp;#160;to&amp;#160; quickly&amp;#160;recover&amp;#160;the&amp;#160;systems&amp;#160;when&amp;#160;they&amp;#160;go&amp;#160;down.&amp;#160;&lt;/p&gt;
&lt;p&gt;In&amp;#160;a&amp;#160;Helix&amp;#160;Enterprise&amp;#160;environment,&amp;#160;that&amp;#160;plan&amp;#160;must&amp;#160;incorporate&amp;#160;not&amp;#160;only&amp;#160;Helix&amp;#160;P4D,&amp;#160; but&amp;#160;also&amp;#160;the&amp;#160;other&amp;#160;range&amp;#160;of&amp;#160;applications&amp;#160;that&amp;#160;are&amp;#160;part&amp;#160;of&amp;#160;your&amp;#160;solution,&amp;#160;like&amp;#160;Git&amp;#160; Fusion&amp;#160;and&amp;#160;GitSwarm.&lt;/p&gt;
&lt;p&gt;What&amp;#160;options&amp;#160;are&amp;#160;available&amp;#160;to&amp;#160;construct&amp;#160;a&amp;#160;High&amp;#160;Availability&amp;#160;and&amp;#160;Disaster&amp;#160;Recovery&amp;#160; plan&amp;#160;for&amp;#160;a&amp;#160;Helix&amp;#160;deployment&amp;#160;that&amp;#160;consists&amp;#160;of&amp;#160;Helix&amp;#160;P4D,&amp;#160;Git&amp;#173;Fusion,&amp;#160;and&amp;#160; GitSwarm?&amp;#160;&amp;#160;&lt;/p&gt;
&lt;p&gt;This&amp;#160;Knowledge&amp;#160;Base&amp;#160;article,&amp;#160;&amp;#8220;&lt;a href="http://answers.perforce.com/articles/KB/15077/"&gt;Helix&amp;#160;High&amp;#160;Availability/Reliability&lt;/a&gt;&amp;#8221;&amp;#160;provides&amp;#160;a&amp;#160;list&amp;#160; of&amp;#160;options&amp;#160;to&amp;#160;choose&amp;#160;from&amp;#160;to&amp;#160;meet&amp;#160;the&amp;#160;requirements&amp;#160;of&amp;#160;your&amp;#160;deployment.&amp;#160;The&amp;#160; options&amp;#160;provide&amp;#160;a&amp;#160;range&amp;#160;of&amp;#160;data&amp;#160;protection&amp;#160;features&amp;#160;that&amp;#160;provide&amp;#160;backup,&amp;#160;high&amp;#160; availability,&amp;#160;compliance,&amp;#160;and&amp;#160;disaster&amp;#160;recovery&amp;#160;solutions&amp;#160;to&amp;#160;safeguard&amp;#160;critical&amp;#160;data.&lt;/p&gt;
&lt;p&gt;Once&amp;#160;you&amp;#8217;ve&amp;#160;selected&amp;#160;the&amp;#160;option&amp;#160;that&amp;#160;best&amp;#160;meets&amp;#160;your&amp;#160;needs,&amp;#160;the&amp;#160;next&amp;#160;step&amp;#160;is&amp;#160;to&amp;#160; document&amp;#160;and&amp;#160;test&amp;#160;the&amp;#160;recovery&amp;#160;process&amp;#160;to&amp;#160;assure&amp;#160;your&amp;#160;plan&amp;#160;is&amp;#160;ready.&lt;/p&gt;
&lt;p&gt;&amp;#160; If&amp;#160;you&amp;#160;have&amp;#160;further&amp;#160;questions&amp;#160;please&amp;#160;contact&amp;#160;&amp;#160;support@perforce.com&amp;#160;or&amp;#160;if&amp;#160;you&amp;#160;need&amp;#160; assistance&amp;#160;in&amp;#160;setting&amp;#160;up&amp;#160;a&amp;#160;HA/DR&amp;#160;plan,&amp;#160;please&amp;#160;contact&amp;#160;consulting@perforce.com.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">About The Author</dc:creator><pubDate>Thu, 02 Jun 2016 18:03:37 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-06-02:what-are-your-options-for-a-high-availability-and-disaster-recovery-plan.html</guid><category>perforce</category></item><item><title>Take Two: The Changing Role of Release Engineering in a DevOps World</title><link>http://ciandcd.github.io/take-two-the-changing-role-of-release-engineering-in-a-devops-world.html</link><description>From:&lt;a href="https://www.perforce.com/blog/160525/take-two-changing-role-release-engineering-devops-world"&gt;https://www.perforce.com/blog/160525/take-two-changing-role-release-engineering-devops-world&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;h3&gt;&lt;img alt="" src="/sites/default/files/jpaulreed-banner-blog.jpg"&gt;&lt;/h3&gt;
&lt;h3&gt;Did you miss us at MERGE 2016?&lt;/h3&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;No worries, because we&amp;#8217;re bringing the conference experience straight to you! Revisit The Changing Role of Release Engineering in a DevOps World by attending our webinar on June 1st at 10:00 a.m. PDT with J. Paul Reed of Release Engineering Approaches, and Perforce&amp;#8217;s own John Williston!&lt;/p&gt;
&lt;p&gt;The rise of DevOps is revitalizing age-old topics in release engineering and application lifecycle management, and aspects of software delivery that DevOps doesn&amp;#8217;t magically solve. If you're responsible for the release engineering function in your organization, see what the new world looks like and which aspects of the industry it&amp;#8217;s leaving behind.&lt;/p&gt;
&lt;p&gt;So don&amp;#8217;t shy away from the challenges on the road towards DevOps and Release Engineering&amp;#8217;s happy union, and instead attack the hoard of new tools and methodologies with a powerful battle cry. Simply put, learn to thrive in this brave, new world.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what you can expect from J. Paul Reed aka Preed&amp;#8217;s mind-blowing broadcast. In this 30-minute webinar you will learn:&lt;/p&gt;
&lt;p&gt;&amp;#183;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; How to define DevOps and it&amp;#8217;s tools for success&lt;/p&gt;
&lt;p&gt;&amp;#183;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; How Release Engineering and DevOps collide, and their benefits&lt;/p&gt;
&lt;p&gt;&amp;#183;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; How continuous delivery will define your organization in the future&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;Can't wait for your second chance at MERGE content? &lt;a href="http://info.perforce.com/webinar-overview-release-engineering-devops.html"&gt;Save your seat now&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;About our presenters:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Presented by J. Paul Reed, Principal Consultant, Release Engineering Approaches&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;J. Paul Reed has over 15 years' experience in the trenches as a build/release and tools engineer, working with such organizations as VMware, Mozilla, Postbox, and Symantec. In 2012, he founded Release Engineering Approaches, a consultancy incorporating a host of tools and techniques to help organizations "Simply Ship. Every time." He's worked across a number of industries, from financial services to cloud-based infrastructure, with teams from 2 to 2,000 on everything from tooling, operational analysis and improvement, team culture transformation, and business value optimization.&lt;/p&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hosted by John Williston, Product Marketing Manager, Perforce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;John is a veteran software developer for Windows, .NET, and the web as well as a musician, philosopher, gamer and all around self-admitted geek. As a Product Marketing Manager and Developer Evangelist at Perforce, he spends much of his time bringing those skills to bear on the challenges of marketing. Follow him on Twitter @p4jbw.&lt;/p&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">itech001</dc:creator><pubDate>Wed, 25 May 2016 16:03:24 +0000</pubDate><guid isPermaLink="false">tag:ciandcd.github.io,2016-05-25:take-two-the-changing-role-of-release-engineering-in-a-devops-world.html</guid><category>perforce</category></item></channel></rss>